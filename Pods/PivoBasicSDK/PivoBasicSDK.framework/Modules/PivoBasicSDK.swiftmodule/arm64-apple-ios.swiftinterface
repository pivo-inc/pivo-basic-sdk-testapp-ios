// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PivoBasicSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CoreBluetooth
import CoreVideo
import Foundation
import ImageIO
import LocalAuthentication
@_exported import PivoBasicSDK
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public enum TrackingSpeed {
  case slower
  case slow
  case normal
  case fast
  case frenzy
  case turbo
  public var name: Swift.String {
    get
  }
}
extension PivoBasicSDK.TrackingSpeed : Swift.RawRepresentable {
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PivoSDK {
  public static var shared: PivoBasicSDK.PivoSDK
  public func unlockWithLicenseKey(licenseKeyFileURL url: Foundation.URL) throws
  public func isPivoConnected() -> Swift.Bool
  public func addDelegate(_ delegate: PivoBasicSDK.PodConnectionDelegate)
  public func removeDelegate(_ delegate: PivoBasicSDK.PodConnectionDelegate)
  public func scan() throws
  public func stopScan()
  public func connect(device: PivoBasicSDK.BluetoothDevice)
  public func disconnect()
  public func setFastestSpeed()
  public func getSupportedSpeedsInSecondsPerRound() -> [Swift.Int]
  public func setSpeedBySecondsPerRound(_ speed: Swift.Int)
  public func getSupportedSpeedsByRemoteControllerInSecoundsPerRound() -> [Swift.Int]
  public func turnRight(angle: Swift.Int)
  public func turnRight(angle: Swift.Int, speed: Swift.Int)
  public func turnLeft(angle: Swift.Int)
  public func turnLeft(angle: Swift.Int, speed: Swift.Int)
  public func turnRightContinuously()
  public func turnRightContinuously(speed: Swift.Int)
  public func turnLeftContinuously()
  public func turnLeftContinuously(speed: Swift.Int)
  public func stop()
  public func requestBatteryLevel()
  public func changePivoName(newName: Swift.String)
  public func keepPivoWakeUp(_ wakeUp: Swift.Bool)
  public func getPivoVersion() -> Swift.String
  public func toogleOnByPassRemoteControllerSignal()
  public func toogleOffBypassRemoteControllerSignal()
  public func turnHold()
  public func turnLeftWithFeedback(angle: Swift.Int) throws
  public func turnRightWithFeedback(angle: Swift.Int) throws
  public func isByPassRemoteControllerSupported() throws -> Swift.Bool
  public func turnOnByPassRemoteController()
  public func turnOffBypassRemoteController()
  @objc deinit
}
public enum TrackingTarget {
  public enum Auto {
    case face
    case body
    case horse
    case dog
    public var name: Swift.String {
      get
    }
    public var confidence: Swift.Float {
      get
    }
    public static func == (a: PivoBasicSDK.TrackingTarget.Auto, b: PivoBasicSDK.TrackingTarget.Auto) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum PreSelectTarget {
    case action
    public static func == (a: PivoBasicSDK.TrackingTarget.PreSelectTarget, b: PivoBasicSDK.TrackingTarget.PreSelectTarget) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public enum CameraSide {
  case front
  case rear
  public var name: Swift.String {
    get
  }
  public static func == (a: PivoBasicSDK.CameraSide, b: PivoBasicSDK.CameraSide) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct InputFrame {
  public let buffer: CoreVideo.CVPixelBuffer
  public let imageOrientation: PivoBasicSDK.Orientation
  public let needMirror: Swift.Bool
  public let deviceOrientation: PivoBasicSDK.Orientation
  public let cameraPosition: PivoBasicSDK.CameraSide
  public init(buffer: CoreVideo.CVPixelBuffer, imageOrientation: PivoBasicSDK.Orientation, needMirror: Swift.Bool, deviceOrientation: PivoBasicSDK.Orientation, cameraPosition: PivoBasicSDK.CameraSide, trackingMode: PivoBasicSDK.TrackingMode)
  public var size: CoreFoundation.CGSize {
    get
  }
  public var detectOrientation: PivoBasicSDK.Orientation {
    get
  }
}
public enum TrackingPosition {
  case topLeft
  case topCenter
  case topRight
  case centerLeft
  case centerCenter
  case centerRight
  case bottomLeft
  case bottomCenter
  case bottomRight
  public var name: Swift.String {
    get
  }
}
extension PivoBasicSDK.TrackingPosition : Swift.RawRepresentable {
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum TrackingMode {
  case off
  case body
  case face
  case action
  case horse
  case dog
  public func toAutoTrackingTarget() -> PivoBasicSDK.TrackingTarget.Auto?
  public func toPreSelectTrackingTarget() -> PivoBasicSDK.TrackingTarget.PreSelectTarget?
  public var name: Swift.String {
    get
  }
}
extension PivoBasicSDK.TrackingMode : Swift.RawRepresentable {
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum PivoError : Foundation.LocalizedError {
  case cannotReadLicenseKeyFile
  case licenseNotProvided
  case invalidLicenseKey
  case expiredLicenseKey
  case bluetoothOff
  case bluetoothPermissionNotAllowed
  case trackingModeNotSupported
  case feedbackNotSupported
  case pivoNotConnected
  case savingLocationCantBeEmpty
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: PivoBasicSDK.PivoError, b: PivoBasicSDK.PivoError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Orientation {
  case portrait
  case portraitUpsideDown
  case landscapeLeft
  case landscapeRight
  public var eventName: Swift.String? {
    get
  }
  public static func == (a: PivoBasicSDK.Orientation, b: PivoBasicSDK.Orientation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension PivoBasicSDK.Orientation {
  public func toDeviceOrientation() -> UIKit.UIDeviceOrientation
}
extension PivoBasicSDK.Orientation {
  public func toCGImageOrientation() -> ImageIO.CGImagePropertyOrientation
  public func toCGImageOrientationMirrored() -> ImageIO.CGImagePropertyOrientation
}
extension PivoBasicSDK.Orientation {
  public var videoOrientation: AVFoundation.AVCaptureVideoOrientation {
    get
  }
}
public enum CaptureSettingMode {
  case photo
  case video
  case common
}
extension PivoBasicSDK.CaptureSettingMode : Swift.RawRepresentable {
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension Swift.Collection {
  public subscript(safe index: Self.Index) -> Self.Element? {
    get
  }
}
public struct AppHelper {
  public static func getFileURLInTempFolder(fileName: Swift.String) -> Foundation.URL
  public static func getDocumentFolder() -> Foundation.URL
  public static func getFileURLInDocumentFolder(fileName: Swift.String) -> Foundation.URL
  public static func createFileURLIn(parentFolder: Swift.String, fileName: Swift.String) -> Foundation.URL
}
extension PivoBasicSDK.AppHelper {
  public static func fileInParentDirectoryPath(parentFolder: Swift.String, folderName: Swift.String?, filename: Swift.String) -> Swift.String
  public static func fileInTempDirectoryPath(_ filename: Swift.String) -> Swift.String
  public static func createFolderInDocumentFolder(folderName: Swift.String)
}
extension Swift.String {
  public func stringByAppendingPathComponent(_ path: Swift.String) -> Swift.String
}
public enum VideoOutputFormat {
  case mp4
  case mov
  public static func == (a: PivoBasicSDK.VideoOutputFormat, b: PivoBasicSDK.VideoOutputFormat) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PivoAppConfig {
  public static let videoOutputFormat: PivoBasicSDK.VideoOutputFormat
}
extension PivoBasicSDK.AppHelper {
  public static func getVideoFileExtension() -> Swift.String
  public static func makeUniqueFileNameWithoutExtension() -> Swift.String
  public static func getCurrentTimeInMiliseconds() -> Swift.String
  public static func makeUniqueVideoName() -> Swift.String
  public static func makeUniqueMovVideoName() -> Swift.String
  public static func makeUniqueAudioName() -> Swift.String
  public static func makeUniqueImageName() -> Swift.String
}
public let KeychainAccessErrorDomain: Swift.String
public enum ItemClass {
  case genericPassword
  case internetPassword
}
public enum ProtocolType {
  case ftp
  case ftpAccount
  case http
  case irc
  case nntp
  case pop3
  case smtp
  case socks
  case imap
  case ldap
  case appleTalk
  case afp
  case telnet
  case ssh
  case ftps
  case https
  case httpProxy
  case httpsProxy
  case ftpProxy
  case smb
  case rtsp
  case rtspProxy
  case daap
  case eppc
  case ipp
  case nntps
  case ldaps
  case telnetS
  case imaps
  case ircs
  case pop3S
}
public enum AuthenticationType {
  case ntlm
  case msn
  case dpa
  case rpa
  case httpBasic
  case httpDigest
  case htmlForm
  case `default`
}
public enum Accessibility {
  case whenUnlocked
  case afterFirstUnlock
  @available(macCatalyst, unavailable)
  case always
  @available(iOS 8.0, macOS 10.10, *)
  case whenPasscodeSetThisDeviceOnly
  case whenUnlockedThisDeviceOnly
  case afterFirstUnlockThisDeviceOnly
  @available(macCatalyst, unavailable)
  case alwaysThisDeviceOnly
}
public enum AuthenticationUI {
  case allow
  case fail
  case skip
  public static func == (a: PivoBasicSDK.AuthenticationUI, b: PivoBasicSDK.AuthenticationUI) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 9.0, macOS 10.11, *)
extension PivoBasicSDK.AuthenticationUI {
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
}
public struct AuthenticationPolicy : Swift.OptionSet {
  @available(iOS 8.0, macOS 10.10, watchOS 2.0, tvOS 8.0, *)
  public static let userPresence: PivoBasicSDK.AuthenticationPolicy
  @available(iOS 11.3, macOS 10.13.4, watchOS 4.3, tvOS 11.3, *)
  public static let biometryAny: PivoBasicSDK.AuthenticationPolicy
  @available(iOS, introduced: 9.0, deprecated: 11.3, renamed: "biometryAny")
  @available(macOS, introduced: 10.12.1, deprecated: 10.13.4, renamed: "biometryAny")
  @available(watchOS, introduced: 2.0, deprecated: 4.3, renamed: "biometryAny")
  @available(tvOS, introduced: 9.0, deprecated: 11.3, renamed: "biometryAny")
  public static let touchIDAny: PivoBasicSDK.AuthenticationPolicy
  @available(iOS 11.3, macOS 10.13, watchOS 4.3, tvOS 11.3, *)
  public static let biometryCurrentSet: PivoBasicSDK.AuthenticationPolicy
  @available(iOS, introduced: 9.0, deprecated: 11.3, renamed: "biometryCurrentSet")
  @available(macOS, introduced: 10.12.1, deprecated: 10.13.4, renamed: "biometryCurrentSet")
  @available(watchOS, introduced: 2.0, deprecated: 4.3, renamed: "biometryCurrentSet")
  @available(tvOS, introduced: 9.0, deprecated: 11.3, renamed: "biometryCurrentSet")
  public static let touchIDCurrentSet: PivoBasicSDK.AuthenticationPolicy
  @available(iOS 9.0, macOS 10.11, watchOS 2.0, tvOS 9.0, *)
  public static let devicePasscode: PivoBasicSDK.AuthenticationPolicy
  @available(macOS 10.15, *)
  @available(iOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public static let watch: PivoBasicSDK.AuthenticationPolicy
  @available(iOS 9.0, macOS 10.12.1, watchOS 2.0, tvOS 9.0, *)
  public static let or: PivoBasicSDK.AuthenticationPolicy
  @available(iOS 9.0, macOS 10.12.1, watchOS 2.0, tvOS 9.0, *)
  public static let and: PivoBasicSDK.AuthenticationPolicy
  @available(iOS 9.0, macOS 10.12.1, watchOS 2.0, tvOS 9.0, *)
  public static let privateKeyUsage: PivoBasicSDK.AuthenticationPolicy
  @available(iOS 9.0, macOS 10.12.1, watchOS 2.0, tvOS 9.0, *)
  public static let applicationPassword: PivoBasicSDK.AuthenticationPolicy
  public let rawValue: Swift.UInt
  public init(rawValue: Swift.UInt)
  public typealias ArrayLiteralElement = PivoBasicSDK.AuthenticationPolicy
  public typealias Element = PivoBasicSDK.AuthenticationPolicy
  public typealias RawValue = Swift.UInt
}
public struct Attributes {
  public var `class`: Swift.String? {
    get
  }
  public var data: Foundation.Data? {
    get
  }
  public var ref: Foundation.Data? {
    get
  }
  public var persistentRef: Foundation.Data? {
    get
  }
  public var accessible: Swift.String? {
    get
  }
  public var accessControl: Security.SecAccessControl? {
    get
  }
  public var accessGroup: Swift.String? {
    get
  }
  public var synchronizable: Swift.Bool? {
    get
  }
  public var creationDate: Foundation.Date? {
    get
  }
  public var modificationDate: Foundation.Date? {
    get
  }
  public var attributeDescription: Swift.String? {
    get
  }
  public var comment: Swift.String? {
    get
  }
  public var creator: Swift.String? {
    get
  }
  public var type: Swift.String? {
    get
  }
  public var label: Swift.String? {
    get
  }
  public var isInvisible: Swift.Bool? {
    get
  }
  public var isNegative: Swift.Bool? {
    get
  }
  public var account: Swift.String? {
    get
  }
  public var service: Swift.String? {
    get
  }
  public var generic: Foundation.Data? {
    get
  }
  public var securityDomain: Swift.String? {
    get
  }
  public var server: Swift.String? {
    get
  }
  public var `protocol`: Swift.String? {
    get
  }
  public var authenticationType: Swift.String? {
    get
  }
  public var port: Swift.Int? {
    get
  }
  public var path: Swift.String? {
    get
  }
  public init(attributes: [Swift.String : Any])
  public subscript(key: Swift.String) -> Any? {
    get
  }
}
@_hasMissingDesignatedInitializers final public class Keychain {
  final public var itemClass: PivoBasicSDK.ItemClass {
    get
  }
  final public var service: Swift.String {
    get
  }
  final public var accessGroup: Swift.String? {
    get
  }
  final public var server: Foundation.URL {
    get
  }
  final public var protocolType: PivoBasicSDK.ProtocolType {
    get
  }
  final public var authenticationType: PivoBasicSDK.AuthenticationType {
    get
  }
  final public var accessibility: PivoBasicSDK.Accessibility {
    get
  }
  @available(iOS 8.0, macOS 10.10, *)
  @available(watchOS, unavailable)
  final public var authenticationPolicy: PivoBasicSDK.AuthenticationPolicy? {
    get
  }
  final public var synchronizable: Swift.Bool {
    get
  }
  final public var label: Swift.String? {
    get
  }
  final public var comment: Swift.String? {
    get
  }
  @available(iOS 8.0, macOS 10.10, *)
  @available(watchOS, unavailable)
  final public var authenticationPrompt: Swift.String? {
    get
  }
  @available(iOS 9.0, macOS 10.11, *)
  final public var authenticationUI: PivoBasicSDK.AuthenticationUI {
    get
  }
  @available(iOS 9.0, macOS 10.11, *)
  final public var authenticationContext: LocalAuthentication.LAContext? {
    get
  }
  convenience public init()
  convenience public init(service: Swift.String)
  convenience public init(accessGroup: Swift.String)
  convenience public init(service: Swift.String, accessGroup: Swift.String)
  convenience public init(server: Swift.String, protocolType: PivoBasicSDK.ProtocolType, accessGroup: Swift.String? = nil, authenticationType: PivoBasicSDK.AuthenticationType = .default)
  convenience public init(server: Foundation.URL, protocolType: PivoBasicSDK.ProtocolType, accessGroup: Swift.String? = nil, authenticationType: PivoBasicSDK.AuthenticationType = .default)
  final public func accessibility(_ accessibility: PivoBasicSDK.Accessibility) -> PivoBasicSDK.Keychain
  @available(iOS 8.0, macOS 10.10, *)
  @available(watchOS, unavailable)
  final public func accessibility(_ accessibility: PivoBasicSDK.Accessibility, authenticationPolicy: PivoBasicSDK.AuthenticationPolicy) -> PivoBasicSDK.Keychain
  final public func synchronizable(_ synchronizable: Swift.Bool) -> PivoBasicSDK.Keychain
  final public func label(_ label: Swift.String) -> PivoBasicSDK.Keychain
  final public func comment(_ comment: Swift.String) -> PivoBasicSDK.Keychain
  final public func attributes(_ attributes: [Swift.String : Any]) -> PivoBasicSDK.Keychain
  @available(iOS 8.0, macOS 10.10, *)
  @available(watchOS, unavailable)
  final public func authenticationPrompt(_ authenticationPrompt: Swift.String) -> PivoBasicSDK.Keychain
  @available(iOS 9.0, macOS 10.11, *)
  final public func authenticationUI(_ authenticationUI: PivoBasicSDK.AuthenticationUI) -> PivoBasicSDK.Keychain
  @available(iOS 9.0, macOS 10.11, *)
  final public func authenticationContext(_ authenticationContext: LocalAuthentication.LAContext) -> PivoBasicSDK.Keychain
  final public func get(_ key: Swift.String, ignoringAttributeSynchronizable: Swift.Bool = true) throws -> Swift.String?
  final public func getString(_ key: Swift.String, ignoringAttributeSynchronizable: Swift.Bool = true) throws -> Swift.String?
  final public func getData(_ key: Swift.String, ignoringAttributeSynchronizable: Swift.Bool = true) throws -> Foundation.Data?
  final public func get<T>(_ key: Swift.String, ignoringAttributeSynchronizable: Swift.Bool = true, handler: (PivoBasicSDK.Attributes?) -> T) throws -> T
  final public func set(_ value: Swift.String, key: Swift.String, ignoringAttributeSynchronizable: Swift.Bool = true) throws
  final public func set(_ value: Foundation.Data, key: Swift.String, ignoringAttributeSynchronizable: Swift.Bool = true) throws
  final public subscript(key: Swift.String) -> Swift.String? {
    get
    set
  }
  final public subscript(string key: Swift.String) -> Swift.String? {
    get
    set
  }
  final public subscript(data key: Swift.String) -> Foundation.Data? {
    get
    set
  }
  final public subscript(attributes key: Swift.String) -> PivoBasicSDK.Attributes? {
    get
  }
  final public func remove(_ key: Swift.String, ignoringAttributeSynchronizable: Swift.Bool = true) throws
  final public func removeAll() throws
  final public func contains(_ key: Swift.String, withoutAuthenticationUI: Swift.Bool = false) throws -> Swift.Bool
  final public class func allKeys(_ itemClass: PivoBasicSDK.ItemClass) -> [(Swift.String, Swift.String)]
  final public func allKeys() -> [Swift.String]
  final public class func allItems(_ itemClass: PivoBasicSDK.ItemClass) -> [[Swift.String : Any]]
  final public func allItems() -> [[Swift.String : Any]]
  @available(iOS 8.0, *)
  final public func getSharedPassword(_ completion: @escaping (_ account: Swift.String?, _ password: Swift.String?, _ error: Swift.Error?) -> () = { account, password, error -> () in })
  @available(iOS 8.0, *)
  final public func getSharedPassword(_ account: Swift.String, completion: @escaping (_ password: Swift.String?, _ error: Swift.Error?) -> () = { password, error -> () in })
  @available(iOS 8.0, *)
  final public func setSharedPassword(_ password: Swift.String, account: Swift.String, completion: @escaping (_ error: Swift.Error?) -> () = { e -> () in })
  @available(iOS 8.0, *)
  final public func removeSharedPassword(_ account: Swift.String, completion: @escaping (_ error: Swift.Error?) -> () = { e -> () in })
  @available(iOS 8.0, *)
  final public class func requestSharedWebCredential(_ completion: @escaping (_ credentials: [[Swift.String : Swift.String]], _ error: Swift.Error?) -> () = { credentials, error -> () in })
  @available(iOS 8.0, *)
  final public class func requestSharedWebCredential(domain: Swift.String, completion: @escaping (_ credentials: [[Swift.String : Swift.String]], _ error: Swift.Error?) -> () = { credentials, error -> () in })
  @available(iOS 8.0, *)
  final public class func requestSharedWebCredential(domain: Swift.String, account: Swift.String, completion: @escaping (_ credentials: [[Swift.String : Swift.String]], _ error: Swift.Error?) -> () = { credentials, error -> () in })
  @available(iOS 8.0, *)
  final public class func generatePassword() -> Swift.String
  @objc deinit
}
extension PivoBasicSDK.Keychain : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  final public var description: Swift.String {
    get
  }
  final public var debugDescription: Swift.String {
    get
  }
}
extension PivoBasicSDK.Attributes : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension PivoBasicSDK.ItemClass : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
extension PivoBasicSDK.ProtocolType : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
extension PivoBasicSDK.AuthenticationType : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
extension PivoBasicSDK.Accessibility : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
public enum Status : Darwin.OSStatus, Swift.Error {
  case success
  case unimplemented
  case diskFull
  case io
  case opWr
  case param
  case wrPerm
  case allocate
  case userCanceled
  case badReq
  case internalComponent
  case notAvailable
  case readOnly
  case authFailed
  case noSuchKeychain
  case invalidKeychain
  case duplicateKeychain
  case duplicateCallback
  case invalidCallback
  case duplicateItem
  case itemNotFound
  case bufferTooSmall
  case dataTooLarge
  case noSuchAttr
  case invalidItemRef
  case invalidSearchRef
  case noSuchClass
  case noDefaultKeychain
  case interactionNotAllowed
  case readOnlyAttr
  case wrongSecVersion
  case keySizeNotAllowed
  case noStorageModule
  case noCertificateModule
  case noPolicyModule
  case interactionRequired
  case dataNotAvailable
  case dataNotModifiable
  case createChainFailed
  case invalidPrefsDomain
  case inDarkWake
  case aclNotSimple
  case policyNotFound
  case invalidTrustSetting
  case noAccessForItem
  case invalidOwnerEdit
  case trustNotAvailable
  case unsupportedFormat
  case unknownFormat
  case keyIsSensitive
  case multiplePrivKeys
  case passphraseRequired
  case invalidPasswordRef
  case invalidTrustSettings
  case noTrustSettings
  case pkcs12VerifyFailure
  case invalidCertificate
  case notSigner
  case policyDenied
  case invalidKey
  case decode
  case `internal`
  case unsupportedAlgorithm
  case unsupportedOperation
  case unsupportedPadding
  case itemInvalidKey
  case itemInvalidKeyType
  case itemInvalidValue
  case itemClassMissing
  case itemMatchUnsupported
  case useItemListUnsupported
  case useKeychainUnsupported
  case useKeychainListUnsupported
  case returnDataUnsupported
  case returnAttributesUnsupported
  case returnRefUnsupported
  case returnPersitentRefUnsupported
  case valueRefUnsupported
  case valuePersistentRefUnsupported
  case returnMissingPointer
  case matchLimitUnsupported
  case itemIllegalQuery
  case waitForCallback
  case missingEntitlement
  case upgradePending
  case mpSignatureInvalid
  case otrTooOld
  case otrIDTooNew
  case serviceNotAvailable
  case insufficientClientID
  case deviceReset
  case deviceFailed
  case appleAddAppACLSubject
  case applePublicKeyIncomplete
  case appleSignatureMismatch
  case appleInvalidKeyStartDate
  case appleInvalidKeyEndDate
  case conversionError
  case appleSSLv2Rollback
  case quotaExceeded
  case fileTooBig
  case invalidDatabaseBlob
  case invalidKeyBlob
  case incompatibleDatabaseBlob
  case incompatibleKeyBlob
  case hostNameMismatch
  case unknownCriticalExtensionFlag
  case noBasicConstraints
  case noBasicConstraintsCA
  case invalidAuthorityKeyID
  case invalidSubjectKeyID
  case invalidKeyUsageForPolicy
  case invalidExtendedKeyUsage
  case invalidIDLinkage
  case pathLengthConstraintExceeded
  case invalidRoot
  case crlExpired
  case crlNotValidYet
  case crlNotFound
  case crlServerDown
  case crlBadURI
  case unknownCertExtension
  case unknownCRLExtension
  case crlNotTrusted
  case crlPolicyFailed
  case idpFailure
  case smimeEmailAddressesNotFound
  case smimeBadExtendedKeyUsage
  case smimeBadKeyUsage
  case smimeKeyUsageNotCritical
  case smimeNoEmailAddress
  case smimeSubjAltNameNotCritical
  case sslBadExtendedKeyUsage
  case ocspBadResponse
  case ocspBadRequest
  case ocspUnavailable
  case ocspStatusUnrecognized
  case endOfData
  case incompleteCertRevocationCheck
  case networkFailure
  case ocspNotTrustedToAnchor
  case recordModified
  case ocspSignatureError
  case ocspNoSigner
  case ocspResponderMalformedReq
  case ocspResponderInternalError
  case ocspResponderTryLater
  case ocspResponderSignatureRequired
  case ocspResponderUnauthorized
  case ocspResponseNonceMismatch
  case codeSigningBadCertChainLength
  case codeSigningNoBasicConstraints
  case codeSigningBadPathLengthConstraint
  case codeSigningNoExtendedKeyUsage
  case codeSigningDevelopment
  case resourceSignBadCertChainLength
  case resourceSignBadExtKeyUsage
  case trustSettingDeny
  case invalidSubjectName
  case unknownQualifiedCertStatement
  case mobileMeRequestQueued
  case mobileMeRequestRedirected
  case mobileMeServerError
  case mobileMeServerNotAvailable
  case mobileMeServerAlreadyExists
  case mobileMeServerServiceErr
  case mobileMeRequestAlreadyPending
  case mobileMeNoRequestPending
  case mobileMeCSRVerifyFailure
  case mobileMeFailedConsistencyCheck
  case notInitialized
  case invalidHandleUsage
  case pvcReferentNotFound
  case functionIntegrityFail
  case internalError
  case memoryError
  case invalidData
  case mdsError
  case invalidPointer
  case selfCheckFailed
  case functionFailed
  case moduleManifestVerifyFailed
  case invalidGUID
  case invalidHandle
  case invalidDBList
  case invalidPassthroughID
  case invalidNetworkAddress
  case crlAlreadySigned
  case invalidNumberOfFields
  case verificationFailure
  case unknownTag
  case invalidSignature
  case invalidName
  case invalidCertificateRef
  case invalidCertificateGroup
  case tagNotFound
  case invalidQuery
  case invalidValue
  case callbackFailed
  case aclDeleteFailed
  case aclReplaceFailed
  case aclAddFailed
  case aclChangeFailed
  case invalidAccessCredentials
  case invalidRecord
  case invalidACL
  case invalidSampleValue
  case incompatibleVersion
  case privilegeNotGranted
  case invalidScope
  case pvcAlreadyConfigured
  case invalidPVC
  case emmLoadFailed
  case emmUnloadFailed
  case addinLoadFailed
  case invalidKeyRef
  case invalidKeyHierarchy
  case addinUnloadFailed
  case libraryReferenceNotFound
  case invalidAddinFunctionTable
  case invalidServiceMask
  case moduleNotLoaded
  case invalidSubServiceID
  case attributeNotInContext
  case moduleManagerInitializeFailed
  case moduleManagerNotFound
  case eventNotificationCallbackNotFound
  case inputLengthError
  case outputLengthError
  case privilegeNotSupported
  case deviceError
  case attachHandleBusy
  case notLoggedIn
  case algorithmMismatch
  case keyUsageIncorrect
  case keyBlobTypeIncorrect
  case keyHeaderInconsistent
  case unsupportedKeyFormat
  case unsupportedKeySize
  case invalidKeyUsageMask
  case unsupportedKeyUsageMask
  case invalidKeyAttributeMask
  case unsupportedKeyAttributeMask
  case invalidKeyLabel
  case unsupportedKeyLabel
  case invalidKeyFormat
  case unsupportedVectorOfBuffers
  case invalidInputVector
  case invalidOutputVector
  case invalidContext
  case invalidAlgorithm
  case invalidAttributeKey
  case missingAttributeKey
  case invalidAttributeInitVector
  case missingAttributeInitVector
  case invalidAttributeSalt
  case missingAttributeSalt
  case invalidAttributePadding
  case missingAttributePadding
  case invalidAttributeRandom
  case missingAttributeRandom
  case invalidAttributeSeed
  case missingAttributeSeed
  case invalidAttributePassphrase
  case missingAttributePassphrase
  case invalidAttributeKeyLength
  case missingAttributeKeyLength
  case invalidAttributeBlockSize
  case missingAttributeBlockSize
  case invalidAttributeOutputSize
  case missingAttributeOutputSize
  case invalidAttributeRounds
  case missingAttributeRounds
  case invalidAlgorithmParms
  case missingAlgorithmParms
  case invalidAttributeLabel
  case missingAttributeLabel
  case invalidAttributeKeyType
  case missingAttributeKeyType
  case invalidAttributeMode
  case missingAttributeMode
  case invalidAttributeEffectiveBits
  case missingAttributeEffectiveBits
  case invalidAttributeStartDate
  case missingAttributeStartDate
  case invalidAttributeEndDate
  case missingAttributeEndDate
  case invalidAttributeVersion
  case missingAttributeVersion
  case invalidAttributePrime
  case missingAttributePrime
  case invalidAttributeBase
  case missingAttributeBase
  case invalidAttributeSubprime
  case missingAttributeSubprime
  case invalidAttributeIterationCount
  case missingAttributeIterationCount
  case invalidAttributeDLDBHandle
  case missingAttributeDLDBHandle
  case invalidAttributeAccessCredentials
  case missingAttributeAccessCredentials
  case invalidAttributePublicKeyFormat
  case missingAttributePublicKeyFormat
  case invalidAttributePrivateKeyFormat
  case missingAttributePrivateKeyFormat
  case invalidAttributeSymmetricKeyFormat
  case missingAttributeSymmetricKeyFormat
  case invalidAttributeWrappedKeyFormat
  case missingAttributeWrappedKeyFormat
  case stagedOperationInProgress
  case stagedOperationNotStarted
  case verifyFailed
  case querySizeUnknown
  case blockSizeMismatch
  case publicKeyInconsistent
  case deviceVerifyFailed
  case invalidLoginName
  case alreadyLoggedIn
  case invalidDigestAlgorithm
  case invalidCRLGroup
  case certificateCannotOperate
  case certificateExpired
  case certificateNotValidYet
  case certificateRevoked
  case certificateSuspended
  case insufficientCredentials
  case invalidAction
  case invalidAuthority
  case verifyActionFailed
  case invalidCertAuthority
  case invaldCRLAuthority
  case invalidCRLEncoding
  case invalidCRLType
  case invalidCRL
  case invalidFormType
  case invalidID
  case invalidIdentifier
  case invalidIndex
  case invalidPolicyIdentifiers
  case invalidTimeString
  case invalidReason
  case invalidRequestInputs
  case invalidResponseVector
  case invalidStopOnPolicy
  case invalidTuple
  case multipleValuesUnsupported
  case notTrusted
  case noDefaultAuthority
  case rejectedForm
  case requestLost
  case requestRejected
  case unsupportedAddressType
  case unsupportedService
  case invalidTupleGroup
  case invalidBaseACLs
  case invalidTupleCredendtials
  case invalidEncoding
  case invalidValidityPeriod
  case invalidRequestor
  case requestDescriptor
  case invalidBundleInfo
  case invalidCRLIndex
  case noFieldValues
  case unsupportedFieldFormat
  case unsupportedIndexInfo
  case unsupportedLocality
  case unsupportedNumAttributes
  case unsupportedNumIndexes
  case unsupportedNumRecordTypes
  case fieldSpecifiedMultiple
  case incompatibleFieldFormat
  case invalidParsingModule
  case databaseLocked
  case datastoreIsOpen
  case missingValue
  case unsupportedQueryLimits
  case unsupportedNumSelectionPreds
  case unsupportedOperator
  case invalidDBLocation
  case invalidAccessRequest
  case invalidIndexInfo
  case invalidNewOwner
  case invalidModifyMode
  case missingRequiredExtension
  case extendedKeyUsageNotCritical
  case timestampMissing
  case timestampInvalid
  case timestampNotTrusted
  case timestampServiceNotAvailable
  case timestampBadAlg
  case timestampBadRequest
  case timestampBadDataFormat
  case timestampTimeNotAvailable
  case timestampUnacceptedPolicy
  case timestampUnacceptedExtension
  case timestampAddInfoNotAvailable
  case timestampSystemFailure
  case signingTimeMissing
  case timestampRejection
  case timestampWaiting
  case timestampRevocationWarning
  case timestampRevocationNotification
  case unexpectedError
}
extension PivoBasicSDK.Status : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init(status: Darwin.OSStatus)
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Darwin.OSStatus)
  public typealias RawValue = Darwin.OSStatus
  public var rawValue: Darwin.OSStatus {
    get
  }
}
extension PivoBasicSDK.Status : Foundation.CustomNSError {
  public static let errorDomain: Swift.String
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var deviceModel: PivoBasicSDK.DeviceModel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var modelName: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public func getMaxFrontCameraResolution() -> PivoBasicSDK.CameraResolution
  @_Concurrency.MainActor(unsafe) public func getMaxRearCameraResolution() -> PivoBasicSDK.CameraResolution
  @_Concurrency.MainActor(unsafe) public var isRearCameraSupport4K: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isFrontCameraSupport4K: Swift.Bool {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var deviceModelString: Swift.String {
    get
  }
}
public struct DirectoryManager {
  public static let defaultDirectoryName: Swift.String
  public static func getTemporaryDirectory(subdirectory: Swift.String = defaultDirectoryName) -> Foundation.URL?
  public static func clearCache()
  @discardableResult
  public static func deleteFile(at url: Foundation.URL) -> Swift.Bool
  public static func getDocumentsDirectory(subdirectory: Swift.String) -> Foundation.URL
  public static func createDirectoryIfNeeded(url: Foundation.URL)
  public static func randomFileUrlWithIdentifier(prefix: Swift.String = "REC", ext: Swift.String = "mp4", temporaryFile: Swift.Bool = true, subdirectory: Swift.String) -> Foundation.URL?
  public static func fileUrlWithIdentifier(identifier: Swift.String, ext: Swift.String = "mp4", temporaryFile: Swift.Bool, subdirectory: Swift.String) -> Foundation.URL?
}
public protocol BluetoothConnectionManagerDelegate : AnyObject {
  func bluetoothConnectionDidUpdateState(_ state: PivoBasicSDK.BluetoothState)
  func bluetoothConnectionDidDeviceFound(_ device: PivoBasicSDK.BluetoothDevice)
  func bluetoothConnectionDidConnectionFailed(_ device: PivoBasicSDK.BluetoothDevice)
  func bluetoothConnectionDidConnectionEstablished(serviceUUID: Swift.String, device: PivoBasicSDK.BluetoothDevice)
  func bluetoothAccessRespondedFirstTime(allowed: Swift.Bool)
  func bluetoothConnectionDisconnected(_ device: PivoBasicSDK.BluetoothDevice?)
  func bluetoothConnectionDidReceiveValue(_ data: Foundation.Data)
}
public enum UUIDTypes {
  case Pod, Light, Mic, RemoteControll
  public static func == (a: PivoBasicSDK.UUIDTypes, b: PivoBasicSDK.UUIDTypes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PivoDeviceUUID {
  static var service: Swift.String { get }
  static var writeCharacteristic: Swift.String { get }
  static var readCharacteristic: Swift.String { get }
  static func toScannableDevice() -> PivoBasicSDK.ScannableDevice
}
extension PivoBasicSDK.PivoDeviceUUID {
  public static func toScannableDevice() -> PivoBasicSDK.ScannableDevice
}
@objc @_inheritsConvenienceInitializers public class ScannableDevices : ObjectiveC.NSObject {
  public class func scannableDevicesType(service: Swift.String?) -> PivoBasicSDK.PivoDeviceType
  public class func getScannableDevices(type: PivoBasicSDK.UUIDTypes) -> [PivoBasicSDK.ScannableDevice]
  @objc override dynamic public init()
  @objc deinit
}
public protocol BluetoothConnectionManager {
  var delegate: PivoBasicSDK.BluetoothConnectionManagerDelegate? { get set }
  func scan(with scannableDevices: [PivoBasicSDK.ScannableDevice]) throws
  func stopScan()
  func connect(to device: PivoBasicSDK.BluetoothDevice)
  func disconnect(device: PivoBasicSDK.BluetoothDevice)
  func write(data: Foundation.Data, to device: PivoBasicSDK.BluetoothDevice) -> Swift.Bool
  func writeWithResponse(data: Foundation.Data, to device: PivoBasicSDK.BluetoothDevice) -> Swift.Bool
}
@_hasMissingDesignatedInitializers open class BluetoothDevice : Swift.Equatable, Swift.Hashable, Swift.Codable {
  public var type: PivoBasicSDK.PivoDeviceType
  public var pivoType: PivoBasicSDK.PivoType?
  public var id: Swift.String
  public var name: Swift.String
  public var firmwareVersion: Swift.Int
  public var serialNumber: Swift.String?
  public var macAddress: [Swift.String]?
  public var batteryLevel: Swift.Int
  public var reportName: Swift.String
  public var connectedAt: Foundation.Date
  required public init(from decoder: Swift.Decoder) throws
  open func encode(to encoder: Swift.Encoder) throws
  public init(id: Swift.String, name: Swift.String, type: PivoBasicSDK.PivoDeviceType = .pod)
  public init(device: PivoBasicSDK.BluetoothDevice)
  public func connectedUpdate()
  public static func == (lhs: PivoBasicSDK.BluetoothDevice, rhs: PivoBasicSDK.BluetoothDevice) -> Swift.Bool
  @objc deinit
  open var hashValue: Swift.Int {
    get
  }
}
extension PivoBasicSDK.BluetoothDevice {
  public func hash(into hasher: inout Swift.Hasher)
}
public struct ScannableDevice {
  public let serviceUUID: Swift.String
  public let writeCharacteristicUUID: Swift.String
  public let readCharacteristicUUID: Swift.String
  public init(serviceUUID: Swift.String, writeCharacteristicUUID: Swift.String, readCharacteristicUUID: Swift.String)
}
@_hasMissingDesignatedInitializers open class PivoSettingModel : PivoBasicSDK.BluetoothDevice {
  public var product: Swift.String
  public var zendeskName: Swift.String
  public var iconImage: UIKit.UIImage?
  public var batteryColor: UIKit.UIColor
  override public init(device: PivoBasicSDK.BluetoothDevice)
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public enum BluetoothState {
  case on
  case off
  case denied
  public static func == (a: PivoBasicSDK.BluetoothState, b: PivoBasicSDK.BluetoothState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum BluetoothError : Foundation.LocalizedError {
  case bluetoothOff
  case bluetoothPermissionNotAllowed
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: PivoBasicSDK.BluetoothError, b: PivoBasicSDK.BluetoothError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.Int {
  public func toUInt8(noOfBytes: Swift.Int = 2) -> [Swift.UInt8]
}
public protocol DelayExecutor {
  func execute(action: Dispatch.DispatchWorkItem, after seconds: Swift.Double)
}
extension Dispatch.DispatchQueue : PivoBasicSDK.DelayExecutor {
  public func execute(action: Dispatch.DispatchWorkItem, after seconds: Swift.Double)
}
extension Swift.StringProtocol {
  public var ascii: [Swift.UInt8] {
    get
  }
}
extension Swift.UInt8 {
  public func toString() -> Swift.String
}
extension Swift.Character {
  public var ascii: Swift.UInt32? {
    get
  }
}
public enum RCButton {
  case center
  case left, right
  case up, down
  case minus, plus
  case stop
  case alt
  public static func == (a: PivoBasicSDK.RCButton, b: PivoBasicSDK.RCButton) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ButtonState : Swift.UInt8 {
  case pressed
  case released
  case doubleClicked
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
indirect public enum PodResponse : Swift.Equatable {
  case MODE
  case CAMERA
  case STOP
  case STOP_RELEASED
  case OFF
  case CONNECTION_COMPLETED
  case NAME_CHANGED
  case VERSION(version: Swift.Int, firmwareVersion: Swift.Int)
  case BATTERY_CHANGED(batteryLevel: Swift.Int)
  case LEFT_PRESSED
  case LEFT_RELEASED
  case RIGHT_PRESSED
  case RIGHT_RELEASED
  case LEFT_CONTINOUS_PRESSED
  case LEFT_CONTINOUS_RELEASED
  case RIGHT_CONTINOUS_PRESSED
  case RIGHT_CONTINOUS_RELEASED
  case SPEEDUP_PRESSED(secondsPerRound: Swift.Int)
  case SPEEDUP_RELEASED(secondsPerRound: Swift.Int)
  case SPEEDDOWN_PRESSED(secondsPerRound: Swift.Int)
  case SPEEDDOWN_RELEASED(secondsPerRound: Swift.Int)
  case SPEED(secondsPerRound: Swift.Int)
  case ROTATED(direction: PivoBasicSDK.Direction, angle: Swift.Int)
  case SERIAL_NUMBER(Swift.String?)
  case TIMEOUT_OFF
  case TIMEOUT_ON(seconds: Swift.Int)
  case HORIZONTAL_ANGLE(angle: Swift.Int)
  case GOTO_HORIZONTAL_ROTATED(angle: Swift.Int)
  case HORIZONTAL_ZERO_POSITION_RESET
  case VERTICAL_ANGLE(angle: Swift.Int)
  case GOTO_VERTICAL_ROTATED(angle: Swift.Int)
  case ROTATED_2D(direction: PivoBasicSDK.Direction, xAngle: Swift.Int, yAngle: Swift.Int)
  case NOTIFY_ROTATED_1DEGREE(direction: PivoBasicSDK.Direction)
  case SET_LED_COLOR(success: Swift.Bool)
  case GET_LED_COLOR(colors: [Swift.UInt8])
  case RUN_PRESET(pattern: PivoBasicSDK.LedsPresetPattern, level: Swift.UInt8)
  case STOP_PRESET
  case REMOTE_CONTROLLER(button: PivoBasicSDK.RCButton, state: PivoBasicSDK.ButtonState)
  case REMOTE_CONTROL(command: PivoBasicSDK.PodResponse, state: PivoBasicSDK.ButtonState)
  case MAC_ADDRESS([Swift.String]?)
  public static func == (a: PivoBasicSDK.PodResponse, b: PivoBasicSDK.PodResponse) -> Swift.Bool
}
public enum DeviceStatus : Swift.UInt8 {
  case goingToSleep
  case goingToBeOff
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class PivoXAxisLegacyProtocol : PivoBasicSDK.XAxisControllable, PivoBasicSDK.SupportedSpeedGettable, PivoBasicSDK.XSpeedSettable {
  public var speedInSecondsPerRound: Swift.Int
  public init(fastestSpeed: Swift.Int)
  public func getContinueBytes(direction: PivoBasicSDK.XAxisDirection) -> [Swift.UInt8]
  public func getRotationBytesWithFeedBack(angle: Swift.Int, direction: PivoBasicSDK.XAxisDirection) throws -> [Swift.UInt8]
  public func getRotationBytes(angle: Swift.Int, direction: PivoBasicSDK.XAxisDirection) -> [Swift.UInt8]
  public func getIsPivoPodLiveV7() -> Swift.Bool
  public func getSpeedByte() -> Swift.UInt8
  public func getSupportedSpeed() -> [Swift.Int]
  public func getSuppotedSpeedByRemoteController() -> [Swift.Int]
  public func setSpeedXBySecondsPerRound(_ seconds: Swift.Int)
  public func setSpeedXFastest()
  @objc deinit
}
public class PivoDevices : PivoBasicSDK.PivoXAxisLegacyProtocol, PivoBasicSDK.PivoLegacyProtocol {
  public var pivoType: PivoBasicSDK.PodDeviceType {
    get
  }
  public var firmwareVersion: Swift.Int {
    get
  }
  public init(pivoType: PivoBasicSDK.PodDeviceType, firmwareVersion: Swift.Int, isPivoPodLiteV7: Swift.Bool = false)
  public func getTurnHoldBytes() -> [Swift.UInt8]
  override public func getIsPivoPodLiveV7() -> Swift.Bool
  override public func getSpeedByte() -> Swift.UInt8
  @objc deinit
}
extension PivoBasicSDK.PivoDevices : PivoBasicSDK.HandshakeRequire {
}
public protocol SupportedSpeedGettable {
  func getSupportedSpeed() -> [Swift.Int]
  func getSuppotedSpeedByRemoteController() -> [Swift.Int]
}
public protocol XSpeedSettable {
  func setSpeedXFastest()
  func setSpeedXBySecondsPerRound(_ seconds: Swift.Int)
}
public protocol YSpeedSettable {
  func setSpeedYFastest()
  func setSpeedYBySecondsPerRound(_ seconds: Swift.Int)
}
public protocol XAxisControllable {
  func getContinueBytes(direction: PivoBasicSDK.XAxisDirection) -> [Swift.UInt8]
  func getRotationBytes(angle: Swift.Int, direction: PivoBasicSDK.XAxisDirection) -> [Swift.UInt8]
  func getRotationBytesWithFeedBack(angle: Swift.Int, direction: PivoBasicSDK.XAxisDirection) throws -> [Swift.UInt8]
}
extension PivoBasicSDK.XAxisControllable {
  public func getContinueBytes(direction: PivoBasicSDK.XAxisDirection) -> [Swift.UInt8]
}
public protocol XYAxisControllable {
  func getRotationBytes(direction: PivoBasicSDK.XYAxisDirection, horizontalAngle: Swift.Int, verticalAngle: Swift.Int) -> [Swift.UInt8]
}
public protocol XPositionCommandGetter {
  func getHorizontalPositionBytes() -> [Swift.UInt8]
  func gotoHorizontalPositionBytes(angle: Swift.Int) -> [Swift.UInt8]
  func resetHorizontalZeroPosition() -> [Swift.UInt8]
}
public protocol YPositionCommandGetter {
  func getVerticalPositionBytes() -> [Swift.UInt8]
  func gotoVerticalPositionBytes(angle: Swift.Int) -> [Swift.UInt8]
}
public protocol XYPositionCommandGetter : PivoBasicSDK.XPositionCommandGetter, PivoBasicSDK.YPositionCommandGetter {
}
public protocol HandshakeHandler {
  var delegate: PivoBasicSDK.HandshakeResultDelegate? { get set }
  var didHandShakeSuccessfully: Swift.Bool { get }
  func startHandshakeProcess()
  func handleHandshakeData(_ data: [Swift.UInt8])
}
public protocol HandshakeRequire {
}
public protocol HandshakeResultDelegate {
  func handshake(commandNeedToSend bytes: [Swift.UInt8])
  func handshake(processResult isSucess: Swift.Bool)
}
public protocol StopControllable {
  func getStopBytes() -> [Swift.UInt8]
  func getTurnHoldBytes() -> [Swift.UInt8]
}
public protocol PivoLegacyStopControllable : PivoBasicSDK.StopControllable {
}
extension PivoBasicSDK.PivoLegacyStopControllable {
  public func getStopBytes() -> [Swift.UInt8]
  public func getStopBytesForPivoLite() -> [Swift.UInt8]
}
public protocol PivoNewStopControllable : PivoBasicSDK.StopControllable {
}
extension PivoBasicSDK.PivoNewStopControllable {
  public func getStopBytes() -> [Swift.UInt8]
  public func getTurnHoldBytes() -> [Swift.UInt8]
}
public protocol SupportOTAUpdate {
  func getOTAUpdater(commandSender: @escaping ([Swift.UInt8]) -> ()) -> PivoBasicSDK.PivoOTAUpdater
}
public protocol Pivo : PivoBasicSDK.StopControllable, PivoBasicSDK.SupportedSpeedGettable, PivoBasicSDK.XAxisControllable, PivoBasicSDK.XSpeedSettable {
  var pivoType: PivoBasicSDK.PodDeviceType { get }
  var firmwareVersion: Swift.Int { get }
}
public protocol PivoLegacyProtocol : PivoBasicSDK.Pivo, PivoBasicSDK.PivoLegacyStopControllable {
}
public protocol PivoNewProtocol : PivoBasicSDK.HandshakeRequire, PivoBasicSDK.Pivo, PivoBasicSDK.PivoNewStopControllable {
}
public class PivoXAxisNewProtocol : PivoBasicSDK.XAxisControllable, PivoBasicSDK.SupportedSpeedGettable, PivoBasicSDK.XSpeedSettable {
  public init(fastestSpeed: Swift.Int = 10)
  public func getRotationBytesWithFeedBack(angle: Swift.Int, direction: PivoBasicSDK.XAxisDirection) throws -> [Swift.UInt8]
  public func getRotationBytes(angle: Swift.Int, direction: PivoBasicSDK.XAxisDirection) -> [Swift.UInt8]
  public func getContinueBytes(direction: PivoBasicSDK.XAxisDirection) -> [Swift.UInt8]
  public func getSupportedSpeed() -> [Swift.Int]
  public func getSuppotedSpeedByRemoteController() -> [Swift.Int]
  public func setSpeedXFastest()
  public func setSpeedXBySecondsPerRound(_ seconds: Swift.Int)
  @objc deinit
}
extension PivoBasicSDK.PivoXAxisNewProtocol : PivoBasicSDK.XPositionCommandGetter {
  public func getHorizontalPositionBytes() -> [Swift.UInt8]
  public func gotoHorizontalPositionBytes(angle: Swift.Int) -> [Swift.UInt8]
  public func resetHorizontalZeroPosition() -> [Swift.UInt8]
}
public class PivoXYAxis : PivoBasicSDK.XAxisControllable, PivoBasicSDK.XYAxisControllable, PivoBasicSDK.SupportedSpeedGettable, PivoBasicSDK.XSpeedSettable, PivoBasicSDK.YSpeedSettable {
  public init(fastestSpeed: Swift.Int = 10)
  public func getRotationBytesWithFeedBack(angle: Swift.Int, direction: PivoBasicSDK.XAxisDirection) throws -> [Swift.UInt8]
  public func getRotationBytes(angle: Swift.Int, direction: PivoBasicSDK.XAxisDirection) -> [Swift.UInt8]
  public func getContinueBytes(direction: PivoBasicSDK.XAxisDirection) -> [Swift.UInt8]
  public func getRotationBytes(direction: PivoBasicSDK.XYAxisDirection, horizontalAngle: Swift.Int, verticalAngle: Swift.Int) -> [Swift.UInt8]
  public func getSupportedSpeed() -> [Swift.Int]
  public func getSuppotedSpeedByRemoteController() -> [Swift.Int]
  public func setSpeedXFastest()
  public func setSpeedXBySecondsPerRound(_ seconds: Swift.Int)
  public func setSpeedYFastest()
  public func setSpeedYBySecondsPerRound(_ seconds: Swift.Int)
  @objc deinit
}
extension PivoBasicSDK.PivoXYAxis : PivoBasicSDK.XYPositionCommandGetter {
  public func getVerticalPositionBytes() -> [Swift.UInt8]
  public func gotoVerticalPositionBytes(angle: Swift.Int) -> [Swift.UInt8]
  public func getHorizontalPositionBytes() -> [Swift.UInt8]
  public func gotoHorizontalPositionBytes(angle: Swift.Int) -> [Swift.UInt8]
  public func resetHorizontalZeroPosition() -> [Swift.UInt8]
}
public class PivoX : PivoBasicSDK.PivoXYAxis, PivoBasicSDK.PivoNewProtocol {
  public var pivoType: PivoBasicSDK.PodDeviceType
  public var firmwareVersion: Swift.Int {
    get
  }
  public init(firmwareVersion: Swift.Int)
  @objc deinit
}
extension PivoBasicSDK.PivoX : PivoBasicSDK.SupportOTAUpdate {
  public func getOTAUpdater(commandSender: @escaping ([Swift.UInt8]) -> ()) -> PivoBasicSDK.PivoOTAUpdater
}
public class PivoMax : PivoBasicSDK.PivoXAxisNewProtocol, PivoBasicSDK.PivoNewProtocol {
  public var pivoType: PivoBasicSDK.PodDeviceType
  public var firmwareVersion: Swift.Int {
    get
  }
  public init(firmwareVersion: Swift.Int)
  @objc deinit
}
extension PivoBasicSDK.PivoMax : PivoBasicSDK.SupportOTAUpdate {
  public func getOTAUpdater(commandSender: @escaping ([Swift.UInt8]) -> ()) -> PivoBasicSDK.PivoOTAUpdater
}
public enum PivoDeviceType : Swift.Equatable, Swift.Codable {
  case pod
  case mic
  case light
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PivoBasicSDK.PivoDeviceType, b: PivoBasicSDK.PivoDeviceType) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public enum PivoType : Swift.Codable, Swift.CaseIterable {
  public static var allCases: [PivoBasicSDK.PivoType] {
    get
  }
  case red, silver, black, gold, lite, x, max, pro
  public var name: Swift.String {
    get
  }
  public func reportName() -> Swift.String
  public var getProductName: Swift.String {
    get
  }
  public var supportsFrenzy: Swift.Bool {
    get
  }
  public var supportsSlower: Swift.Bool {
    get
  }
  public func image() -> UIKit.UIImage?
  public static func == (a: PivoBasicSDK.PivoType, b: PivoBasicSDK.PivoType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PivoBasicSDK.PivoType]
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public class PivoCommand {
  public init(command: PivoBasicSDK.PodResponse, value: [Swift.UInt8], valueByteIndexes: Swift.Set<Swift.Int> = [])
  @objc deinit
}
public enum PodDeviceType : Swift.Equatable {
  case V0, V1, V2, V3, V4, red, silver, black, gold, lite, x, max, pro
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: PivoBasicSDK.PodDeviceType, b: PivoBasicSDK.PodDeviceType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum Speed {
  case SLOW
  case NORMAL
  case FASTER
  case FASTEST
  case SPEED_1
  case SPEED_2
  case SPEED_3
  case SPEED_4
  case SPEED_5
  case SPEED_6
  case SPEED_7
  case SPEED_8
  case SPEED_9
  case SPEED_10
  case SPEED_11
  case CUSTOM(secondsPerRound: Swift.Int)
}
public enum Sound {
  case SWITCH_ON
  case SWITCH_OFF
  case SUCCESS
  case DISCONNECTED
  case OTHER_1
  case OTHER_2
  public static func == (a: PivoBasicSDK.Sound, b: PivoBasicSDK.Sound) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PivoAngle {
  case DEGREE_1
  case DEGREE_4
  public static func == (a: PivoBasicSDK.PivoAngle, b: PivoBasicSDK.PivoAngle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Mode {
  case NORMAL
  case HYBRID_VIDEO
  case TIMELAPSE
  public static func == (a: PivoBasicSDK.Mode, b: PivoBasicSDK.Mode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Direction {
  case right
  case left
  case up
  case down
  case upRight
  case upLeft
  case downRight
  case downLeft
  public func toXAxisDirection() -> PivoBasicSDK.XAxisDirection?
  public static func == (a: PivoBasicSDK.Direction, b: PivoBasicSDK.Direction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum XAxisDirection {
  case right
  case left
  public static func == (a: PivoBasicSDK.XAxisDirection, b: PivoBasicSDK.XAxisDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias XYAxisDirection = PivoBasicSDK.Direction
public protocol PivoCommandGetter {
  func getConnectionCheckCmd() -> [Swift.UInt8]
  func getBatteryLevelCmd() -> [Swift.UInt8]
  func getBluetoothMacAddressCmd() -> [Swift.UInt8]
  func getSerialNumber() -> [Swift.UInt8]
  func getChangeNameCmd(_ name: Swift.String) -> [Swift.UInt8]
  func startNotifierBytes() -> [Swift.UInt8]
  func stopNotifierBytes() -> [Swift.UInt8]
  func getStopBytes() -> [Swift.UInt8]
}
public struct BrightLevel {
  public let warm: Swift.UInt8
  public let cool: Swift.UInt8
  public init(warm: Swift.UInt8, cool: Swift.UInt8)
}
@_hasMissingDesignatedInitializers public class PivoCommandGetterImp : PivoBasicSDK.PivoCommandGetter {
  final public let header: Swift.UInt8
  final public let type: Swift.UInt8
  public func getConnectionCheckCmd() -> [Swift.UInt8]
  public func getBatteryLevelCmd() -> [Swift.UInt8]
  public func getBluetoothMacAddressCmd() -> [Swift.UInt8]
  public func getSerialNumber() -> [Swift.UInt8]
  public func getChangeNameCmd(_ name: Swift.String) -> [Swift.UInt8]
  public func startNotifierBytes() -> [Swift.UInt8]
  public func stopNotifierBytes() -> [Swift.UInt8]
  public func getStopBytes() -> [Swift.UInt8]
  public func getToogleOnByPassRemoteControllerBytes() -> [Swift.UInt8]
  public func getToogleOffByPassRemoteControllerBytes() -> [Swift.UInt8]
  public func getTimeoutNeverBytes() -> [Swift.UInt8]
  public func getTimeoutBytes(seconds: Swift.Int) -> [Swift.UInt8]
  public func getTurnOffCmd() -> [Swift.UInt8]
  public func getTurnOnCmd(level: PivoBasicSDK.BrightLevel) -> [Swift.UInt8]
  public func getSetFlashLevelCmd(level: PivoBasicSDK.BrightLevel) -> [Swift.UInt8]
  public func getDimFlashCmd(level: PivoBasicSDK.BrightLevel) -> [Swift.UInt8]
  public func getGetCurrentBrightnessLevelCmd() -> [Swift.UInt8]
  public func getStopPresetCmd() -> [Swift.UInt8]
  public func getRunPresetCmd(patternType: PivoBasicSDK.PatternType, interval: PivoBasicSDK.PresetInterval, level: PivoBasicSDK.BrightLevel) -> [Swift.UInt8]
  public func getControlLedCmd(_ ledColor: PivoBasicSDK.MicLedColor) -> [Swift.UInt8]
  public func getSetNoiseCancellationCmd(_ noiseCancellationState: PivoBasicSDK.NoiseCancellationState) -> [Swift.UInt8]
  public func getSetSoundModeCmd(_ soundMode: PivoBasicSDK.SoundMode) -> [Swift.UInt8]
  public func getSetMicModeCmd(_ micMode: PivoBasicSDK.MicMode) -> [Swift.UInt8]
  public func getSetBypassButtonPress(_ byPassState: PivoBasicSDK.ByPassState) -> [Swift.UInt8]
  public func getMicStatusCmd() -> [Swift.UInt8]
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PivoNewCommandGetterImp : PivoBasicSDK.PivoCommandGetterImp {
  override public func getConnectionCheckCmd() -> [Swift.UInt8]
  override public func getBatteryLevelCmd() -> [Swift.UInt8]
  override public func getBluetoothMacAddressCmd() -> [Swift.UInt8]
  override public func getSerialNumber() -> [Swift.UInt8]
  override public func getChangeNameCmd(_ name: Swift.String) -> [Swift.UInt8]
  override public func startNotifierBytes() -> [Swift.UInt8]
  override public func stopNotifierBytes() -> [Swift.UInt8]
  override public func getStopBytes() -> [Swift.UInt8]
  override public func getToogleOnByPassRemoteControllerBytes() -> [Swift.UInt8]
  override public func getToogleOffByPassRemoteControllerBytes() -> [Swift.UInt8]
  override public func getTimeoutNeverBytes() -> [Swift.UInt8]
  override public func getTimeoutBytes(seconds: Swift.Int) -> [Swift.UInt8]
  public func getSetLedsColorBytes(_ color: PivoBasicSDK.PodLedColor, level: Swift.UInt8) -> [Swift.UInt8]
  public func getSetLedsPresetBytes(_ preset: PivoBasicSDK.LedsPresetPattern, level: Swift.UInt8) -> [Swift.UInt8]
  public func getStopPresetBytes() -> [Swift.UInt8]
  @objc deinit
}
public enum PatternType : Swift.UInt8 {
  case sineWave
  case squareWave
  case blinkWave
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum PresetInterval : Swift.UInt8 {
  case point1sec
  case point2sec
  case point3sec
  case point4sec
  case point5sec
  case point6sec
  case point7sec
  case point8sec
  case point9sec
  case oneSec
  case twoSec
  case threeSec
  case fourSec
  case fiveSec
  case sixSec
  case sevenSec
  case eightSec
  case nineSec
  case tenSec
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum PodLedColor {
  case off
  case cyan
  case blue
  case red
  case green
  case yellow
  case purple
  case orange
  case white
  public static func == (a: PivoBasicSDK.PodLedColor, b: PivoBasicSDK.PodLedColor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LedsPresetPattern : Swift.UInt8 {
  case a
  case b
  case c
  case d
  case e
  case f
  case g
  case h
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum MovementCommandType : Swift.UInt8 {
  case stop
  case rotateRightSecPerRound
  case rotateLeftSecPerRound
  case getHorizontalPosition
  case goToHorizontalPositionSecPerRound
  case setHorizontalSpeedSecPerRound
  case resetHorizontalZeroPosition
  case rotateRightDegressPerSec
  case rotateLeftDegreePerSec
  case goToHorizontalPositionDegreePerSec
  case setHorizontalSpeedDegreePerSec
  case moveUpSecPerRound
  case moveDownSecPerRound
  case getVericalPosition
  case gotoVerticalPositionSecPerRound
  case setVerticalSpeedSecPerRound
  case moveUpDegreePerSec
  case moveDownDegreePerSec
  case gotoVerticalPositionDegreePerSec
  case setVerticalSpeedDegreePerSec
  case notifier
  case rightUpSecPerRound
  case rightDownSecPerRound
  case leftUpSecPerRound
  case leftDownSecPerRound
  case rightUpDegreePerSec
  case rightDownDegreePerSec
  case leftUpDegreePerSec
  case leftDownDegreePerSec
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum LedCommandType : Swift.UInt8 {
  case setLedColors
  case getLedColors
  case stopPreset
  case runPreset
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum CommandGroup : Swift.UInt8 {
  case basic
  case remoteController
  case movement
  case led
  case info
  case authentication
  case otaUpdate
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum BasicCommandType : Swift.UInt8 {
  case connectionCheck
  case timeoutOnOff
  case batteryLevel
  case makeBeamSound
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum BufferType {
  case video
  case audio
  public static func == (a: PivoBasicSDK.BufferType, b: PivoBasicSDK.BufferType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CameraResolution {
  case hd, fhd, p4K
  public static func == (a: PivoBasicSDK.CameraResolution, b: PivoBasicSDK.CameraResolution) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum EngineCamera {
  case front
  case rear
  case ultraWide
  case dual
  public static func == (a: PivoBasicSDK.EngineCamera, b: PivoBasicSDK.EngineCamera) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RCCommandType : Swift.UInt8 {
  case bypass
  case startPairingRC
  case cancelPairingRC
  case btnCenter
  case btnLeft
  case btnRight
  case btnUp
  case btnDown
  case btnMinus
  case btnPlus
  case btnStop
  case btnAlt
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum MicMode : Swift.UInt8 {
  case `default`
  case internalMic
  case externalMic
  case off
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum ByPassState : Swift.UInt8 {
  case off
  case on
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum EarphoneStatus : Swift.UInt8 {
  case notPlugged
  case pluggedWithMic
  case pluggedWithOutMic
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum MicLedColor : Swift.UInt8 {
  case off
  case blinkingWhite
  case white
  case blinkingBlue
  case blue
  case blinkingRed
  case red
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum NoiseCancellationState : Swift.UInt8 {
  case off
  case on
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum SoundMode : Swift.UInt8 {
  case normal
  case bass
  case smooth
  case vibrant
  case voice
  case treble
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum DeviceModel : Swift.Int, Swift.CaseIterable {
  public static let cameraDevices_fhd_hd: [PivoBasicSDK.DeviceModel]
  public static let cameraDevices_4k_hd: [PivoBasicSDK.DeviceModel]
  case none
  case iPhone4
  case iPhone4s
  case iPhone5
  case iPhone5c
  case iPhone5s
  case iPhone6
  case iPhone6Plus
  case iPhone6s
  case iPhone6sPlus
  case iPhone7
  case iPhone7Plus
  case iPhoneSE
  case iPhone8
  case iPhone8Plus
  case iPhoneX
  case iPhoneXS
  case iPhoneXSMax
  case iPhoneXR
  case iPhone11
  case iPhone11Pro
  case iPhone11ProMax
  case iPhoneSE2
  case iPhone12
  case iPhone12mini
  case iPhone12Pro
  case iPhone12ProMax
  case iPhone13mini
  case iPhone13
  case iPhone13Pro
  case iPhone13ProMax
  case simulator
  public var modelName: Swift.String {
    get
  }
  public init(identifier: Swift.String)
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PivoBasicSDK.DeviceModel]
  public typealias RawValue = Swift.Int
  public static var allCases: [PivoBasicSDK.DeviceModel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public protocol ConnectionDelegate : AnyObject {
  func pivoConnectLog(_ log: Swift.String)
  func pivoConnection(bluetoothIsOn: Swift.Bool)
  func pivoConnectionBluetoothPermissionDenied()
  func pivoConnectionBluetoothPermissionResponded(allowed: Swift.Bool)
  func pivoConnection(didDiscover device: PivoBasicSDK.BluetoothDevice)
  func pivoConnection(didFailToConnect device: PivoBasicSDK.BluetoothDevice)
  func pivoConnection(didEstablishSuccessfully device: PivoBasicSDK.BluetoothDevice)
  func pivoConnection(didDisconnect device: PivoBasicSDK.BluetoothDevice)
  func pivoBatteryUpdate(device: PivoBasicSDK.BluetoothDevice)
}
extension PivoBasicSDK.ConnectionDelegate {
  public func pivoConnectLog(_ log: Swift.String)
  public func pivoConnection(bluetoothIsOn: Swift.Bool)
  public func pivoConnectionBluetoothPermissionDenied()
  public func pivoConnectionBluetoothPermissionResponded(allowed: Swift.Bool)
  public func pivoConnection(didDiscover device: PivoBasicSDK.BluetoothDevice)
  public func pivoConnection(didFailToConnect device: PivoBasicSDK.BluetoothDevice)
  public func pivoConnection(didEstablishSuccessfully device: PivoBasicSDK.BluetoothDevice)
  public func pivoConnection(didDisconnect device: PivoBasicSDK.BluetoothDevice)
  public func pivoBatteryUpdate(device: PivoBasicSDK.BluetoothDevice)
}
public protocol PodConnectionDelegate : PivoBasicSDK.ConnectionDelegate {
  func pivoConnectionDidRotate()
  func pivoConnectionDidStop()
  func pivoConnection(remoteControlerCommandReceived command: PivoBasicSDK.PodResponse)
  func pivoConnection(otaUpdateProgress percentage: Swift.Int)
  func pivoConnectionStartOTAUpdateFailed()
  func pivoConnectionOTAUpdateSuccessfully()
  func pivoConnectionOTAUpdateFailed()
}
extension PivoBasicSDK.PodConnectionDelegate {
  public func pivoConnectionDidRotate()
  public func pivoConnectionDidStop()
  public func pivoConnection(remoteControlerCommandReceived command: PivoBasicSDK.PodResponse)
  public func pivoConnection(otaUpdateProgress percentage: Swift.Int)
  public func pivoConnectionStartOTAUpdateFailed()
  public func pivoConnectionOTAUpdateSuccessfully()
  public func pivoConnectionOTAUpdateFailed()
}
public protocol GradientPalette {
  var from: UIKit.UIColor { get }
  var to: UIKit.UIColor { get }
}
public struct GradientColor : PivoBasicSDK.GradientPalette {
  public let from: UIKit.UIColor
  public let to: UIKit.UIColor
  @available(iOS 13.0, *)
  public init(from: Swift.String, to: Swift.String)
  public init(from: UIKit.UIColor, to: UIKit.UIColor)
}
public struct TriGradientColor : PivoBasicSDK.GradientPalette {
  public let from: UIKit.UIColor
  public let middle: UIKit.UIColor
  public let to: UIKit.UIColor
  @available(iOS 13.0, *)
  public init(from: Swift.String, middle: Swift.String, to: Swift.String)
  @available(iOS 13.0, *)
  public init(from: UIKit.UIColor, middle: UIKit.UIColor, to: UIKit.UIColor)
}
extension UIKit.UIColor {
  @available(iOS 13.0, *)
  convenience public init(hexString: Swift.String, alpha: CoreFoundation.CGFloat = 1.0)
  convenience public init(red: Swift.Int, green: Swift.Int, blue: Swift.Int, alpha: CoreFoundation.CGFloat)
  public var inverted: UIKit.UIColor {
    get
  }
}
extension UIKit.UIColor {
  public struct Gradient {
    public static var red: PivoBasicSDK.GradientColor
    public static var yellow: PivoBasicSDK.GradientColor
    public static var blue: PivoBasicSDK.GradientColor
    public static var purple: PivoBasicSDK.GradientColor
    public static var green: PivoBasicSDK.GradientColor
    public static var grey: PivoBasicSDK.GradientColor
    public static var redVariation: PivoBasicSDK.GradientColor
    public static var yellowVariation: PivoBasicSDK.GradientColor
    public static var blueVariation: PivoBasicSDK.GradientColor
    public static var purpleVariation: PivoBasicSDK.GradientColor
    public static var greenVariation: PivoBasicSDK.GradientColor
    public static var greyVariation: PivoBasicSDK.GradientColor
    public static var redPurpleVaridation: PivoBasicSDK.GradientColor
    public static var redOrangePurpleVaridation: PivoBasicSDK.TriGradientColor
  }
  public enum type {
    case plain(UIKit.UIColor)
    case gradient(PivoBasicSDK.GradientPalette)
  }
}
public struct ColorLevel {
  public var original: UIKit.UIColor
  public var light1: UIKit.UIColor
  public var light2: UIKit.UIColor
  public var light3: UIKit.UIColor
  public var light4: UIKit.UIColor
  public var light5: UIKit.UIColor
  public var light6: UIKit.UIColor
  public var dark1: UIKit.UIColor
  public var dark2: UIKit.UIColor
  public var dark3: UIKit.UIColor
  public var dark4: UIKit.UIColor
  public var dark5: UIKit.UIColor
  public init(original: UIKit.UIColor, light1: UIKit.UIColor, light2: UIKit.UIColor, light3: UIKit.UIColor, light4: UIKit.UIColor, light5: UIKit.UIColor, light6: UIKit.UIColor, dark1: UIKit.UIColor, dark2: UIKit.UIColor, dark3: UIKit.UIColor, dark4: UIKit.UIColor, dark5: UIKit.UIColor)
}
extension UIKit.UIColor {
  public struct Pivo {
    public static var white: UIKit.UIColor
    public static var white20: UIKit.UIColor
    public static var white30: UIKit.UIColor
    public static var black: UIKit.UIColor
    public static var black50: UIKit.UIColor
    public static var charcoal: UIKit.UIColor
    public static var dividerBackground: UIKit.UIColor
    public static var exposureSliderBackground: UIKit.UIColor
    public static var red: PivoBasicSDK.ColorLevel
    public static var yellow: PivoBasicSDK.ColorLevel
    public static var orange: UIKit.UIColor
    public static var blue: PivoBasicSDK.ColorLevel
    public static var purple: PivoBasicSDK.ColorLevel
    public static var green: PivoBasicSDK.ColorLevel
    public static var gray: PivoBasicSDK.ColorLevel
    public static let grayLight7: UIKit.UIColor
    public static let grayLight8: UIKit.UIColor
    public static let grayLight9: UIKit.UIColor
  }
}
public protocol LightConnectionDelegate : PivoBasicSDK.ConnectionDelegate {
  func lightDeviceNameChanged(_ name: Swift.String)
  func lightOn(warm: Swift.UInt8, cool: Swift.UInt8)
  func lightOff()
  func lightFlash(warm: Swift.UInt8, cool: Swift.UInt8)
  func lightDimSmoothly(warm: Swift.UInt8, cool: Swift.UInt8)
  func lightCurrentBrightnessLevel(warm: Swift.UInt8, cool: Swift.UInt8)
  func lightPresetStopRunning()
  func lightRunPreset(type: PivoBasicSDK.PatternType, interval: PivoBasicSDK.PresetInterval, warm: Swift.UInt8, cool: Swift.UInt8)
}
extension PivoBasicSDK.LightConnectionDelegate {
  public func lightDeviceNameChanged(_ name: Swift.String)
  public func lightOn(warm: Swift.UInt8, cool: Swift.UInt8)
  public func lightOff()
  public func lightFlash(warm: Swift.UInt8, cool: Swift.UInt8)
  public func lightDimSmoothly(warm: Swift.UInt8, cool: Swift.UInt8)
  public func lightCurrentBrightnessLevel(warm: Swift.UInt8, cool: Swift.UInt8)
  public func lightPresetStopRunning()
  public func lightRunPreset(type: PivoBasicSDK.PatternType, interval: PivoBasicSDK.PresetInterval, warm: Swift.UInt8, cool: Swift.UInt8)
}
public protocol MicConnectionDelegate : PivoBasicSDK.ConnectionDelegate {
  func micLedColorChanged(_ color: PivoBasicSDK.MicLedColor)
  func micNoiseCancellationChanged(_ state: PivoBasicSDK.NoiseCancellationState)
  func micSoundModeChanged(_ soundMode: PivoBasicSDK.SoundMode)
  func micModeChanged(_ micMode: PivoBasicSDK.MicMode)
  func micByPassChanged(_ state: PivoBasicSDK.ByPassState)
  func micDeviceNameChanged(_ name: Swift.String)
  func micStatusChanged(ledColor: PivoBasicSDK.MicLedColor, noiseCancellation: PivoBasicSDK.NoiseCancellationState, soundMode: PivoBasicSDK.SoundMode, micMode: PivoBasicSDK.MicMode, byPass: PivoBasicSDK.ByPassState, earphoneStatus: PivoBasicSDK.EarphoneStatus)
  func micMainButtonEvent(_ state: PivoBasicSDK.ButtonState)
  func micPlusButtonEvent(_ state: PivoBasicSDK.ButtonState)
  func micMinusButtonEvent(_ state: PivoBasicSDK.ButtonState)
  func micDeviceStatusChanged(_ status: PivoBasicSDK.DeviceStatus)
  func micEarphoneStatusChanged(_ status: PivoBasicSDK.EarphoneStatus)
}
extension PivoBasicSDK.MicConnectionDelegate {
  public func micLedColorChanged(_ color: PivoBasicSDK.MicLedColor)
  public func micNoiseCancellationChanged(_ state: PivoBasicSDK.NoiseCancellationState)
  public func micSoundModeChanged(_ soundMode: PivoBasicSDK.SoundMode)
  public func micModeChanged(_ micMode: PivoBasicSDK.MicMode)
  public func micByPassChanged(_ state: PivoBasicSDK.ByPassState)
  public func micDeviceNameChanged(_ name: Swift.String)
  public func micStatusChanged(ledColor: PivoBasicSDK.MicLedColor, noiseCancellation: PivoBasicSDK.NoiseCancellationState, soundMode: PivoBasicSDK.SoundMode, micMode: PivoBasicSDK.MicMode, byPass: PivoBasicSDK.ByPassState, earphoneStatus: PivoBasicSDK.EarphoneStatus)
  public func micMainButtonEvent(_ state: PivoBasicSDK.ButtonState)
  public func micPlusButtonEvent(_ state: PivoBasicSDK.ButtonState)
  public func micMinusButtonEvent(_ state: PivoBasicSDK.ButtonState)
  public func micDeviceStatusChanged(_ status: PivoBasicSDK.DeviceStatus)
  public func micEarphoneStatusChanged(_ status: PivoBasicSDK.EarphoneStatus)
}
public protocol PivoConnection {
  func scan() throws
  func stopScan()
  func connect(device: PivoBasicSDK.BluetoothDevice)
  func disconnect()
  func isPivoConnected() -> Swift.Bool
  func addDelegate(_ delegate: PivoBasicSDK.ConnectionDelegate)
  func removeDelegate(_ delegate: PivoBasicSDK.ConnectionDelegate)
  func requestBatteryLevel()
  func changePivoName(name: Swift.String)
}
public protocol PodConnection : PivoBasicSDK.PivoConnection {
  func getSupportedSpeedsInSecondsPerRound() -> [Swift.Int]
  func getSupportedSpeedsByRemoteController() -> [Swift.Int]
  func keepPivoWakeUp(_ wakeUp: Swift.Bool)
  func getPivoVersion() -> Swift.String
  func getPivoPodFirmwareVersion() -> Swift.Int
  func getPivoType() -> PivoBasicSDK.PivoType?
  func is2AxisPivo() -> Swift.Bool?
  func getLatestConnectedPivoID() -> Swift.String?
  func startRotatingNotifier()
  func stopRotatingNotifier()
  func toogleOnByPassRemoteControllerSignal()
  func toogleOffBypassRemoteControllerSignal()
  func setPivoTimeout(_ timeout: PivoBasicSDK.Timeout)
  func setLedsColor(_ color: PivoBasicSDK.PodLedColor, level: Swift.UInt8)
  func setLedsPreset(_ preset: PivoBasicSDK.LedsPresetPattern, level: Swift.UInt8)
  func stopLedsPreset()
  func isSupportOTAUpdate() -> Swift.Bool
  func startOTAUpdate(firmwareFileURL: Foundation.URL) throws
}
public enum Timeout {
  case never
  case seconds(Swift.Int)
}
public protocol LightConnection : PivoBasicSDK.PivoConnection {
  func turnLightOff()
  func turnLightOn(level: PivoBasicSDK.BrightLevel)
  func setFlash(level: PivoBasicSDK.BrightLevel)
  func setLightDim(to level: PivoBasicSDK.BrightLevel)
  func getCurrentBrightnessLevel()
  func turnOffLightPreset()
  func setLightPreset(pattern: PivoBasicSDK.PatternType, interval: PivoBasicSDK.PresetInterval, level: PivoBasicSDK.BrightLevel)
  func getLatestConnectedPivoLight() -> PivoBasicSDK.BluetoothDevice?
}
public protocol MicConnection : PivoBasicSDK.PivoConnection {
  func setLedColor(_ color: PivoBasicSDK.MicLedColor)
  func setNoiseCancellation(_ state: PivoBasicSDK.NoiseCancellationState)
  func setSoundMode(_ mode: PivoBasicSDK.SoundMode)
  func setMicMode(_ mode: PivoBasicSDK.MicMode)
  func setByPass(_ state: PivoBasicSDK.ByPassState)
  func requestMicStatus()
  func getLatestConnectedPivoMic() -> PivoBasicSDK.BluetoothDevice?
}
public enum PivoConnectionStatus {
  case notConnected
  case connecting
  case connected
  public static func == (a: PivoBasicSDK.PivoConnectionStatus, b: PivoBasicSDK.PivoConnectionStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class PivoBluetoothConnection : ObjectiveC.NSObject {
  public var delegates: [PivoBasicSDK.AnyPivoConnectionDelegate]
  public var pivo: PivoBasicSDK.Pivo?
  public var latestConnectedDevice: PivoBasicSDK.BluetoothDevice?
  public var connectedDevice: PivoBasicSDK.BluetoothDevice? {
    get
    set
  }
  public var bConnection: PivoBasicSDK.BluetoothConnectionManager?
  public var pivoBeforeCommend: Foundation.Data?
  public var sendCommandGetter: PivoBasicSDK.PivoCommandGetterImp
  @objc override dynamic public init()
  public func addDelegate(_ delegate: PivoBasicSDK.ConnectionDelegate)
  public func removeDelegate(_ delegate: PivoBasicSDK.ConnectionDelegate)
  public func notifyFailToConnect(device: PivoBasicSDK.BluetoothDevice)
  public func resetPivoWhenDisconnected()
  @objc deinit
}
extension PivoBasicSDK.PivoBluetoothConnection : PivoBasicSDK.PivoConnection {
  public func scan() throws
  public func stopScan()
  public func connect(device: PivoBasicSDK.BluetoothDevice)
  public func disconnect()
  public func isPivoConnected() -> Swift.Bool
  public func requestBatteryLevel()
  public func changePivoName(name: Swift.String)
  public func writeToPivo(_ data: [Swift.UInt8])
}
extension PivoBasicSDK.PivoBluetoothConnection {
  public func didUpdateState(_ state: PivoBasicSDK.BluetoothState)
  public func didDeviceFound(_ device: PivoBasicSDK.BluetoothDevice)
  public func didConnectionFailed(_ device: PivoBasicSDK.BluetoothDevice)
  public func didConnectionEstablished(device: PivoBasicSDK.BluetoothDevice)
  public func accessRespondedFirstTime(allowed: Swift.Bool)
  public func disconnected()
  public func didReceiveValue(_ data: Foundation.Data)
}
public class AnyPivoConnectionDelegate {
  public init(_ delegate: PivoBasicSDK.PodConnectionDelegate)
  public init(_ delegate: PivoBasicSDK.LightConnectionDelegate)
  public init(_ delegate: PivoBasicSDK.MicConnectionDelegate)
  public init(_ delegate: PivoBasicSDK.ConnectionDelegate)
  @objc deinit
}
public enum OTAUpdateError : Swift.Error {
  case notValidFirmwareFile
  case pivoNotConnected
  public static func == (a: PivoBasicSDK.OTAUpdateError, b: PivoBasicSDK.OTAUpdateError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class PodBluetoothConnection : PivoBasicSDK.PivoBluetoothConnection, PivoBasicSDK.PodConnection, PivoBasicSDK.PivoControllerForDeviceConnection {
  public init(bluetoothConnectionManager: PivoBasicSDK.BluetoothConnectionManager, delayExecutor: PivoBasicSDK.DelayExecutor = DispatchQueue.global(qos: .userInitiated), pivoFactory: PivoBasicSDK.PivoFactory? = nil, keepAliveTimer: PivoBasicSDK.KeepAliveTimer? = nil)
  public func tryConnect(device: PivoBasicSDK.BluetoothDevice)
  public func keepPivoWakeUp(_ wakeUp: Swift.Bool)
  public func getPivoVersion() -> Swift.String
  public func getPivoPodFirmwareVersion() -> Swift.Int
  public func getPivoType() -> PivoBasicSDK.PivoType?
  public func getLatestConnectedPivoID() -> Swift.String?
  public func is2AxisPivo() -> Swift.Bool?
  @objc deinit
}
extension PivoBasicSDK.PodBluetoothConnection : PivoBasicSDK.PivoOTAUpdaterDelegate {
  public func isSupportOTAUpdate() -> Swift.Bool
  public func startOTAUpdate(firmwareFileURL: Foundation.URL) throws
  public func otaUpdaterChangeToOTAModeSuccessfully()
  public func otaUpdaterChangeToOTAModeFailed()
  public func otaUpdaterOTAUpdateFailed()
  public func otaUpdaterOTAUpdateSuccessfully()
  public func otaUpdateProgress(_ percentage: Swift.Int)
}
extension PivoBasicSDK.PodBluetoothConnection {
  public func turnRight(angle: Swift.Int)
  public func turnLeft(angle: Swift.Int)
  public func turnRightContinuously()
  public func turnLeftContinuously()
  public func turnHold()
  public func turnLeftWithFeedback(angle: Swift.Int) throws
  public func turnRightWithFeedback(angle: Swift.Int) throws
  public func setXSpeedBySecondsPerRound(_ seconds: Swift.Int)
  public func setYSpeedBySecondsPerRound(_ seconds: Swift.Int)
  public func turn(direction: PivoBasicSDK.Direction, xAngle: Swift.Int, yAngle: Swift.Int)
  public func stopRotating(isForce: Swift.Bool)
  public func setFastestSpeed()
  public func getSupportedSpeedsInSecondsPerRound() -> [Swift.Int]
  public func getSupportedSpeedsByRemoteController() -> [Swift.Int]
  public func setSpeedBySecondsPerRound(_ seconds: Swift.Int)
  public func toogleOnByPassRemoteControllerSignal()
  public func toogleOffBypassRemoteControllerSignal()
  public func startRotatingNotifier()
  public func stopRotatingNotifier()
  public func setPivoTimeout(_ timeout: PivoBasicSDK.Timeout)
  public func setLedsColor(_ color: PivoBasicSDK.PodLedColor, level: Swift.UInt8)
  public func setLedsPreset(_ preset: PivoBasicSDK.LedsPresetPattern, level: Swift.UInt8)
  public func stopLedsPreset()
}
extension PivoBasicSDK.PodBluetoothConnection {
  public func ChangeConnectionStatus(_ status: PivoBasicSDK.PivoConnectionStatus)
}
extension PivoBasicSDK.PodBluetoothConnection : PivoBasicSDK.PivoFactoryDelegate {
  public func pivoFactory(didPivoCreated pivo: PivoBasicSDK.Pivo)
  public func pivoFactoryNotPivoDevice()
  public func pivoFactory(commandNeedToSend bytes: [Swift.UInt8])
}
extension Foundation.Data {
  public func toUInt8Array() -> [Swift.UInt8]
}
extension PivoBasicSDK.PodBluetoothConnection {
  public func getScannableDevices() -> [PivoBasicSDK.ScannableDevice]
  public func handleReceivedData(_ vals: [Swift.UInt8], _ device: PivoBasicSDK.BluetoothDevice)
  public func bluetoothDidConnection(serviceUUID: Swift.String, device: PivoBasicSDK.BluetoothDevice)
}
extension PivoBasicSDK.PodBluetoothConnection : PivoBasicSDK.BluetoothConnectionManagerDelegate {
  public func bluetoothConnectionDidUpdateState(_ state: PivoBasicSDK.BluetoothState)
  public func bluetoothConnectionDidConnectionFailed(_ device: PivoBasicSDK.BluetoothDevice)
  public func bluetoothConnectionDidDeviceFound(_ device: PivoBasicSDK.BluetoothDevice)
  public func bluetoothConnectionDidConnectionEstablished(serviceUUID: Swift.String, device: PivoBasicSDK.BluetoothDevice)
  public func bluetoothAccessRespondedFirstTime(allowed: Swift.Bool)
  public func bluetoothConnectionDisconnected(_ device: PivoBasicSDK.BluetoothDevice?)
  public func bluetoothConnectionDidReceiveValue(_ data: Foundation.Data)
}
@objc public class LightBluetoothConnection : PivoBasicSDK.PivoBluetoothConnection, PivoBasicSDK.LightConnection {
  public init(_ bConnectionManager: PivoBasicSDK.BluetoothConnectionManager)
  public func turnLightOff()
  public func turnLightOn(level: PivoBasicSDK.BrightLevel)
  public func setFlash(level: PivoBasicSDK.BrightLevel)
  public func setLightDim(to level: PivoBasicSDK.BrightLevel)
  public func getCurrentBrightnessLevel()
  public func getLatestConnectedPivoLight() -> PivoBasicSDK.BluetoothDevice?
  public func turnOffLightPreset()
  public func setLightPreset(pattern: PivoBasicSDK.PatternType, interval: PivoBasicSDK.PresetInterval, level: PivoBasicSDK.BrightLevel)
  @objc deinit
}
extension PivoBasicSDK.LightBluetoothConnection : PivoBasicSDK.BluetoothConnectionManagerDelegate {
  public func bluetoothConnectionDidUpdateState(_ state: PivoBasicSDK.BluetoothState)
  public func bluetoothConnectionDidDeviceFound(_ device: PivoBasicSDK.BluetoothDevice)
  public func bluetoothConnectionDidConnectionFailed(_ device: PivoBasicSDK.BluetoothDevice)
  public func bluetoothConnectionDidConnectionEstablished(serviceUUID: Swift.String, device: PivoBasicSDK.BluetoothDevice)
  public func bluetoothAccessRespondedFirstTime(allowed: Swift.Bool)
  public func bluetoothConnectionDisconnected(_ device: PivoBasicSDK.BluetoothDevice?)
  public func bluetoothConnectionDidReceiveValue(_ data: Foundation.Data)
}
extension PivoBasicSDK.LightBluetoothConnection {
  public func getScannableDevices() -> [PivoBasicSDK.ScannableDevice]
  public func tryConnect(device: PivoBasicSDK.BluetoothDevice)
}
@objc public class MicBluetoothConnection : PivoBasicSDK.PivoBluetoothConnection, PivoBasicSDK.MicConnection {
  public init(_ bConnectionManager: PivoBasicSDK.BluetoothConnectionManager)
  public func setLedColor(_ color: PivoBasicSDK.MicLedColor)
  public func setNoiseCancellation(_ state: PivoBasicSDK.NoiseCancellationState)
  public func setSoundMode(_ mode: PivoBasicSDK.SoundMode)
  public func setMicMode(_ mode: PivoBasicSDK.MicMode)
  public func setByPass(_ state: PivoBasicSDK.ByPassState)
  public func requestMicStatus()
  public func getLatestConnectedPivoMic() -> PivoBasicSDK.BluetoothDevice?
  @objc deinit
}
extension PivoBasicSDK.MicBluetoothConnection : PivoBasicSDK.BluetoothConnectionManagerDelegate {
  public func bluetoothConnectionDidUpdateState(_ state: PivoBasicSDK.BluetoothState)
  public func bluetoothConnectionDidDeviceFound(_ device: PivoBasicSDK.BluetoothDevice)
  public func bluetoothConnectionDidConnectionFailed(_ device: PivoBasicSDK.BluetoothDevice)
  public func bluetoothConnectionDidConnectionEstablished(serviceUUID: Swift.String, device: PivoBasicSDK.BluetoothDevice)
  public func bluetoothAccessRespondedFirstTime(allowed: Swift.Bool)
  public func bluetoothConnectionDisconnected(_ device: PivoBasicSDK.BluetoothDevice?)
  public func bluetoothConnectionDidReceiveValue(_ data: Foundation.Data)
}
extension PivoBasicSDK.MicBluetoothConnection {
  public func getScannableDevices() -> [PivoBasicSDK.ScannableDevice]
  public func tryConnect(device: PivoBasicSDK.BluetoothDevice)
}
public protocol PivoOTAUpdaterDelegate : AnyObject {
  func otaUpdaterChangeToOTAModeSuccessfully()
  func otaUpdaterChangeToOTAModeFailed()
  func otaUpdaterOTAUpdateFailed()
  func otaUpdaterOTAUpdateSuccessfully()
  func otaUpdateProgress(_ percentage: Swift.Int)
}
public enum PivoOTAUpdaterError : Swift.Error {
  case notInOTAMode
  public static func == (a: PivoBasicSDK.PivoOTAUpdaterError, b: PivoBasicSDK.PivoOTAUpdaterError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PivoOTAUpdater {
  var delegate: PivoBasicSDK.PivoOTAUpdaterDelegate? { get set }
  func initiateOTAUpdate()
  func handleResponse(_ data: [Swift.UInt8])
  func startOTAUpdate(firmwareData: [Swift.UInt8]) throws
}
public class Pivo2DOTAUpdater : PivoBasicSDK.PivoOTAUpdater {
  public var delegate: PivoBasicSDK.PivoOTAUpdaterDelegate?
  public enum Status {
    case prepare
    case otaUpdateReady
    public static func == (a: PivoBasicSDK.Pivo2DOTAUpdater.Status, b: PivoBasicSDK.Pivo2DOTAUpdater.Status) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(maxPayloadSize: Swift.Int = 64, commandSender: @escaping ([Swift.UInt8]) -> ())
  public func initiateOTAUpdate()
  public func handleResponse(_ data: [Swift.UInt8])
  public func startOTAUpdate(firmwareData: [Swift.UInt8]) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WeakObject<T> where T : AnyObject {
  @objc deinit
}
extension PivoBasicSDK.WeakObject : PivoBasicSDK.PivoOTAUpdaterDelegate where T : PivoBasicSDK.PivoOTAUpdaterDelegate {
  public func otaUpdaterChangeToOTAModeSuccessfully()
  public func otaUpdaterChangeToOTAModeFailed()
  public func otaUpdaterOTAUpdateFailed()
  public func otaUpdaterOTAUpdateSuccessfully()
  public func otaUpdateProgress(_ percentage: Swift.Int)
}
public protocol CRC8Maker {
  func makeCRC8(data: Foundation.Data) -> Swift.UInt8
}
public struct CRC8MakerImp : PivoBasicSDK.CRC8Maker {
  public init()
  public func makeCRC8(data: Foundation.Data) -> Swift.UInt8
}
public class PivoAuth {
  public init(gAuthKey: Swift.Int32, gAuthIV: Swift.Int32)
  public func getInquiry() -> Swift.Int32
  public func calculateAnswer(_ input: Swift.Int32) -> Swift.Int32
  public func verifyAnswer(input: Swift.Int32, answer: Swift.Int32) -> Swift.Bool
  @objc deinit
}
public class Pivo2DHandshakeHandler : PivoBasicSDK.HandshakeHandler {
  public var delegate: PivoBasicSDK.HandshakeResultDelegate?
  public var didHandShakeSuccessfully: Swift.Bool
  public init(pivoFirmwareVersion: Swift.Int)
  public func startHandshakeProcess()
  public func handleHandshakeData(_ data: [Swift.UInt8])
  @objc deinit
}
public class Pivo1DHandshakeHandler : PivoBasicSDK.HandshakeHandler {
  public var delegate: PivoBasicSDK.HandshakeResultDelegate?
  public var didHandShakeSuccessfully: Swift.Bool
  public init(pivoFirmwareVersion: Swift.Int)
  public func startHandshakeProcess()
  public func handleHandshakeData(_ data: [Swift.UInt8])
  @objc deinit
}
public struct PivoHandshakeHandlerFactory {
  public static func make(pivoVersion: Swift.Int, firmwareVersion: Swift.Int) -> PivoBasicSDK.HandshakeHandler
}
public protocol KeepAliveTimer {
  func start()
  func stop()
}
public class KeepAliveTimerImp : PivoBasicSDK.KeepAliveTimer {
  public typealias Action = () -> ()
  public init(actionToKeepAlive: @escaping PivoBasicSDK.KeepAliveTimerImp.Action, actionInterval: Swift.Double = 30)
  public func start()
  public func stop()
  @objc deinit
}
public class PivoConnectionManager : PivoBasicSDK.PivoConnection {
  public var pivoConnection: PivoBasicSDK.PivoConnection
  public init(_ pivoConnection: PivoBasicSDK.PivoConnection)
  public func addDelegate(_ delegate: PivoBasicSDK.ConnectionDelegate)
  public func removeDelegate(_ delegate: PivoBasicSDK.ConnectionDelegate)
  public func scan() throws
  public func stopScan()
  public func connect(device: PivoBasicSDK.BluetoothDevice)
  public func disconnect()
  public func isPivoConnected() -> Swift.Bool
  public func requestBatteryLevel()
  public func changePivoName(name: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers public class PivoPodConnectionManager : PivoBasicSDK.PivoConnectionManager, PivoBasicSDK.PodConnection {
  public static var shared: PivoBasicSDK.PivoPodConnectionManager
  override public func isPivoConnected() -> Swift.Bool
  public func setFastestSpeed()
  public func getSupportedSpeedsInSecondsPerRound() -> [Swift.Int]
  public func setSpeedBySecondsPerRound(_ speed: Swift.Int)
  public func getPivoPodFirmwareVersion() -> Swift.Int
  public func getSupportedSpeedsByRemoteController() -> [Swift.Int]
  public func isSupportOTAUpdate() -> Swift.Bool
  public func startOTAUpdate(firmwareFileURL: Foundation.URL) throws
  public func turnRight(angle: Swift.Int)
  public func turnRight(angle: Swift.Int, speed: Swift.Int)
  public func turnLeft(angle: Swift.Int)
  public func turnLeft(angle: Swift.Int, speed: Swift.Int)
  public func turnRightContinuously()
  public func turnRightContinuously(speed: Swift.Int)
  public func turnLeftContinuously()
  public func turnLeftContinuously(speed: Swift.Int)
  public func turn(direction: PivoBasicSDK.Direction, xSpeed: Swift.Int, ySpeed: Swift.Int, xAngle: Swift.Int, yAngle: Swift.Int)
  public func stop()
  public func stop(isForce: Swift.Bool)
  public func turnHold()
  public func turnLeftWithFeedback(angle: Swift.Int, speed: Swift.Int) throws
  public func turnRightWithFeedback(angle: Swift.Int, speed: Swift.Int) throws
  public func forceTurnLeft(angle: Swift.Int, speed: Swift.Int)
  public func forceTurnRight(angle: Swift.Int, speed: Swift.Int)
  public func keepPivoWakeUp(_ wakeUp: Swift.Bool)
  public func getPivoVersion() -> Swift.String
  public func getPivoType() -> PivoBasicSDK.PivoType?
  public func is2AxisPivo() -> Swift.Bool?
  public func getLatestConnectedPivoID() -> Swift.String?
  public func startRotatingNotifier()
  public func stopRotatingNotifier()
  public func toogleOnByPassRemoteControllerSignal()
  public func toogleOffBypassRemoteControllerSignal()
  public func setPivoTimeout(_ timeout: PivoBasicSDK.Timeout)
  public func setLedsColor(_ color: PivoBasicSDK.PodLedColor, level: Swift.UInt8)
  public func setLedsPreset(_ preset: PivoBasicSDK.LedsPresetPattern, level: Swift.UInt8)
  public func stopLedsPreset()
  override public init(_ pivoConnection: PivoBasicSDK.PivoConnection)
  @objc deinit
}
extension PivoBasicSDK.PivoPodConnectionManager : PivoBasicSDK.PivoRCConnection {
  public func scanRemoteController() throws
  public func stopScanRemoteController()
  public func connectRemoteController(id: Swift.String) -> Swift.Bool
  public func disconnectRemoteController()
  public func addRemoteControllerDelegate(_ delegate: PivoBasicSDK.PivoRCConnectionDelegate)
  public func removeRemoteControllerDelegate(_ delegate: PivoBasicSDK.PivoRCConnectionDelegate)
  public func isRemoteControllerSupportOTAUpdate() -> Swift.Bool
  public func startRemoteControllerOTAUpdate(firmwareFileURL: Foundation.URL) throws
}
public class PivoLightConnectionManager : PivoBasicSDK.PivoConnectionManager, PivoBasicSDK.LightConnection {
  public init()
  public func turnLightOff()
  public func turnLightOn(level: PivoBasicSDK.BrightLevel)
  public func setFlash(level: PivoBasicSDK.BrightLevel)
  public func setLightDim(to level: PivoBasicSDK.BrightLevel)
  public func getCurrentBrightnessLevel()
  public func getLatestConnectedPivoLight() -> PivoBasicSDK.BluetoothDevice?
  public func turnOffLightPreset()
  public func setLightPreset(pattern: PivoBasicSDK.PatternType, interval: PivoBasicSDK.PresetInterval, level: PivoBasicSDK.BrightLevel)
  @objc deinit
}
public class PivoMicConnectionManager : PivoBasicSDK.PivoConnectionManager, PivoBasicSDK.MicConnection {
  public init()
  public func setLedColor(_ color: PivoBasicSDK.MicLedColor)
  public func setNoiseCancellation(_ state: PivoBasicSDK.NoiseCancellationState)
  public func setSoundMode(_ mode: PivoBasicSDK.SoundMode)
  public func setMicMode(_ mode: PivoBasicSDK.MicMode)
  public func setByPass(_ state: PivoBasicSDK.ByPassState)
  public func requestMicStatus()
  public func getLatestConnectedPivoMic() -> PivoBasicSDK.BluetoothDevice?
  @objc deinit
}
public protocol PivoFactoryDelegate : AnyObject {
  func pivoFactory(didPivoCreated pivo: PivoBasicSDK.Pivo)
  func pivoFactoryNotPivoDevice()
  func pivoFactory(commandNeedToSend bytes: [Swift.UInt8])
}
public protocol PivoFactory {
  var delegate: PivoBasicSDK.PivoFactoryDelegate? { get set }
  func makePivo(version: Swift.Int, firmware: Swift.Int)
  func handleHandshakeData(_ data: [Swift.UInt8])
}
@_hasMissingDesignatedInitializers public class PivoFactoryImp : PivoBasicSDK.PivoFactory {
  weak public var delegate: PivoBasicSDK.PivoFactoryDelegate?
  public func makePivo(version: Swift.Int, firmware: Swift.Int)
  public func handleHandshakeData(_ data: [Swift.UInt8])
  @objc deinit
}
extension PivoBasicSDK.PivoFactoryImp : PivoBasicSDK.HandshakeResultDelegate {
  public func handshake(commandNeedToSend bytes: [Swift.UInt8])
  public func handshake(processResult isSucess: Swift.Bool)
}
public protocol PivoControllerForDeviceConnection {
  func setFastestSpeed()
  func setSpeedBySecondsPerRound(_ seconds: Swift.Int)
  func turnRight(angle: Swift.Int)
  func turnLeft(angle: Swift.Int)
  func turnRightContinuously()
  func turnLeftContinuously()
  func stopRotating(isForce: Swift.Bool)
  func setXSpeedBySecondsPerRound(_ seconds: Swift.Int)
  func setYSpeedBySecondsPerRound(_ seconds: Swift.Int)
  func turn(direction: PivoBasicSDK.Direction, xAngle: Swift.Int, yAngle: Swift.Int)
  func turnHold()
  func turnLeftWithFeedback(angle: Swift.Int) throws
  func turnRightWithFeedback(angle: Swift.Int) throws
}
public protocol ForceableControl {
  func forceTurnLeft(angle: Swift.Int)
  func forceTurnRight(angle: Swift.Int)
}
public class ThrottlePivoController : PivoBasicSDK.PivoControllerForDeviceConnection, PivoBasicSDK.ForceableControl {
  public typealias DateGetter = () -> (Foundation.Date)
  public init(pivoController: PivoBasicSDK.PivoControllerForDeviceConnection, maximumNumberOfCommandInASecond: Swift.UInt = 20, currentDateGetter: @escaping PivoBasicSDK.ThrottlePivoController.DateGetter = Date.init)
  public func setFastestSpeed()
  public func setSpeedBySecondsPerRound(_ seconds: Swift.Int)
  public func setXSpeedBySecondsPerRound(_ seconds: Swift.Int)
  public func setYSpeedBySecondsPerRound(_ seconds: Swift.Int)
  public func turn(direction: PivoBasicSDK.Direction, xAngle: Swift.Int, yAngle: Swift.Int)
  public func turnRight(angle: Swift.Int)
  public func turnLeft(angle: Swift.Int)
  public func forceTurnLeft(angle: Swift.Int)
  public func forceTurnRight(angle: Swift.Int)
  public func turnRightContinuously()
  public func turnLeftContinuously()
  public func stopRotating(isForce: Swift.Bool)
  public func turnHold()
  public func turnLeftWithFeedback(angle: Swift.Int) throws
  public func turnRightWithFeedback(angle: Swift.Int) throws
  @objc deinit
}
extension ObjectiveC.NSObject {
  public var className: Swift.String {
    get
  }
}
public protocol PivoEventLogger {
  func addEvent(_ event: Swift.String)
}
public enum member {
  case jiny, arlin, jellapi
  public static func == (a: PivoBasicSDK.member, b: PivoBasicSDK.member) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func print(_ items: Any, _ printType: PivoBasicSDK.member = .jellapi)
public enum PivoLogLevel : Swift.Int {
  case Debug
  case Release
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class VoidPivoEventLogger : PivoBasicSDK.PivoEventLogger {
  public init(_ superclass: Any? = nil)
  public func addEvent(_ event: Swift.String)
  @objc deinit
}
public struct Common {
  public static func convertUInt32ToUInt8Array(number: Swift.Int32) -> [Swift.UInt8]
  public static func convertUInt8ArrayToUInt32(number: [Swift.UInt8]) -> Swift.Int32
}
public protocol PivoRCConnection {
  func scanRemoteController() throws
  func stopScanRemoteController()
  func connectRemoteController(id: Swift.String) -> Swift.Bool
  func disconnectRemoteController()
  func addRemoteControllerDelegate(_ delegate: PivoBasicSDK.PivoRCConnectionDelegate)
  func removeRemoteControllerDelegate(_ delegate: PivoBasicSDK.PivoRCConnectionDelegate)
  func isRemoteControllerSupportOTAUpdate() -> Swift.Bool
  func startRemoteControllerOTAUpdate(firmwareFileURL: Foundation.URL) throws
}
public protocol PivoRCConnectionDelegate : AnyObject {
  func pivoRCConnection(bluetoothIsOn: Swift.Bool)
  func pivoRCConnectionBluetoothPermissionDenied()
  func pivoRCConnection(didDiscover id: Swift.String, deviceName: Swift.String)
  func pivoRCConnection(didFailToConnect id: Swift.String)
  func pivoRCConnection(didDisconnect id: Swift.String, deviceName: Swift.String)
  func pivoRCConnectionBluetoothPermissionResponded(allowed: Swift.Bool)
  func pivoRCConnection(didEstablishSuccessfully id: Swift.String)
  func pivoRCConnection(otaUpdateProgress percentage: Swift.Int)
  func pivoRCConnectionStartOTAUpdateFailed()
  func pivoRCConnectionOTAUpdateSuccessfully()
  func pivoRCConnectionOTAUpdateFailed()
}
extension PivoBasicSDK.PivoRCConnectionDelegate {
  public func pivoRCConnection(bluetoothIsOn: Swift.Bool)
  public func pivoRCConnectionBluetoothPermissionDenied()
  public func pivoRCConnection(didDiscover id: Swift.String, deviceName: Swift.String)
  public func pivoRCConnection(didFailToConnect id: Swift.String)
  public func pivoRCConnectionBluetoothPermissionResponded(allowed: Swift.Bool)
  public func pivoRCConnection(otaUpdateProgress percentage: Swift.Int)
  public func pivoRCConnectionFailedToStartOTAUpdate()
  public func pivoRCConnectionOTAUpdateSuccessfully()
  public func pivoRCConnectionOTAUpdateFailed()
}
public class AnyPivoRCConnectionDelegate : PivoBasicSDK.PivoRCConnectionDelegate {
  public init(_ delegate: PivoBasicSDK.PivoRCConnectionDelegate)
  public func pivoRCConnection(bluetoothIsOn: Swift.Bool)
  public func pivoRCConnectionBluetoothPermissionDenied()
  public func pivoRCConnection(didDiscover id: Swift.String, deviceName: Swift.String)
  public func pivoRCConnection(didFailToConnect id: Swift.String)
  public func pivoRCConnection(didDisconnect id: Swift.String, deviceName: Swift.String)
  public func pivoRCConnectionBluetoothPermissionResponded(allowed: Swift.Bool)
  public func pivoRCConnection(didEstablishSuccessfully id: Swift.String)
  public func pivoRCConnection(otaUpdateProgress percentage: Swift.Int)
  public func pivoRCConnectionStartOTAUpdateFailed()
  public func pivoRCConnectionOTAUpdateSuccessfully()
  public func pivoRCConnectionOTAUpdateFailed()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PivoXRC : PivoBasicSDK.RemoteController, PivoBasicSDK.SupportOTAUpdate {
  public func getOTAUpdater(commandSender: @escaping ([Swift.UInt8]) -> ()) -> PivoBasicSDK.PivoOTAUpdater
  @objc deinit
}
public protocol RemoteController {
}
@objc public class PivoRCBluetoothConnection : ObjectiveC.NSObject, PivoBasicSDK.PivoRCConnection {
  public enum PivoConnectionStatus {
    case notConnected
    case connecting
    case connected
    public static func == (a: PivoBasicSDK.PivoRCBluetoothConnection.PivoConnectionStatus, b: PivoBasicSDK.PivoRCBluetoothConnection.PivoConnectionStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let shared: PivoBasicSDK.PivoRCBluetoothConnection
  public var logger: PivoBasicSDK.PivoEventLogger {
    get
    set
  }
  public init(bluetoothConnectionManager: PivoBasicSDK.BluetoothConnectionManager, delayExecutor: PivoBasicSDK.DelayExecutor = DispatchQueue.global(qos: .userInitiated))
  public func addRemoteControllerDelegate(_ delegate: PivoBasicSDK.PivoRCConnectionDelegate)
  public func removeRemoteControllerDelegate(_ delegate: PivoBasicSDK.PivoRCConnectionDelegate)
  public func scanRemoteController() throws
  public func stopScanRemoteController()
  public func connectRemoteController(id: Swift.String) -> Swift.Bool
  public func disconnectRemoteController()
  @objc deinit
}
extension PivoBasicSDK.PivoRCBluetoothConnection : PivoBasicSDK.PivoOTAUpdaterDelegate {
  public func isRemoteControllerSupportOTAUpdate() -> Swift.Bool
  public func startRemoteControllerOTAUpdate(firmwareFileURL: Foundation.URL) throws
  public func otaUpdaterChangeToOTAModeSuccessfully()
  public func otaUpdaterChangeToOTAModeFailed()
  public func otaUpdaterOTAUpdateFailed()
  public func otaUpdaterOTAUpdateSuccessfully()
  public func otaUpdateProgress(_ percentage: Swift.Int)
}
extension PivoBasicSDK.PivoRCBluetoothConnection : PivoBasicSDK.BluetoothConnectionManagerDelegate {
  public func bluetoothConnectionDisconnected(_ device: PivoBasicSDK.BluetoothDevice?)
  public func bluetoothConnectionDidReceiveValue(_ data: Foundation.Data)
  public func bluetoothConnectionDidUpdateState(_ state: PivoBasicSDK.BluetoothState)
  public func bluetoothConnectionDidDeviceFound(_ device: PivoBasicSDK.BluetoothDevice)
  public func bluetoothConnectionDidConnectionFailed(_ device: PivoBasicSDK.BluetoothDevice)
  public func bluetoothConnectionDidConnectionEstablished(serviceUUID: Swift.String, device: PivoBasicSDK.BluetoothDevice)
  public func bluetoothAccessRespondedFirstTime(allowed: Swift.Bool)
}
extension PivoBasicSDK.TrackingSpeed : Swift.Equatable {}
extension PivoBasicSDK.TrackingSpeed : Swift.Hashable {}
extension PivoBasicSDK.TrackingTarget.Auto : Swift.Equatable {}
extension PivoBasicSDK.TrackingTarget.Auto : Swift.Hashable {}
extension PivoBasicSDK.TrackingTarget.PreSelectTarget : Swift.Equatable {}
extension PivoBasicSDK.TrackingTarget.PreSelectTarget : Swift.Hashable {}
extension PivoBasicSDK.CameraSide : Swift.Equatable {}
extension PivoBasicSDK.CameraSide : Swift.Hashable {}
extension PivoBasicSDK.TrackingPosition : Swift.Equatable {}
extension PivoBasicSDK.TrackingPosition : Swift.Hashable {}
extension PivoBasicSDK.TrackingMode : Swift.Equatable {}
extension PivoBasicSDK.TrackingMode : Swift.Hashable {}
extension PivoBasicSDK.PivoError : Swift.Equatable {}
extension PivoBasicSDK.PivoError : Swift.Hashable {}
extension PivoBasicSDK.Orientation : Swift.Equatable {}
extension PivoBasicSDK.Orientation : Swift.Hashable {}
extension PivoBasicSDK.CaptureSettingMode : Swift.Equatable {}
extension PivoBasicSDK.CaptureSettingMode : Swift.Hashable {}
extension PivoBasicSDK.VideoOutputFormat : Swift.Equatable {}
extension PivoBasicSDK.VideoOutputFormat : Swift.Hashable {}
extension PivoBasicSDK.ItemClass : Swift.Equatable {}
extension PivoBasicSDK.ItemClass : Swift.Hashable {}
extension PivoBasicSDK.ProtocolType : Swift.Equatable {}
extension PivoBasicSDK.ProtocolType : Swift.Hashable {}
extension PivoBasicSDK.AuthenticationType : Swift.Equatable {}
extension PivoBasicSDK.AuthenticationType : Swift.Hashable {}
extension PivoBasicSDK.Accessibility : Swift.Equatable {}
extension PivoBasicSDK.Accessibility : Swift.Hashable {}
extension PivoBasicSDK.AuthenticationUI : Swift.Equatable {}
extension PivoBasicSDK.AuthenticationUI : Swift.Hashable {}
extension PivoBasicSDK.Status : Swift.Equatable {}
extension PivoBasicSDK.Status : Swift.Hashable {}
extension PivoBasicSDK.UUIDTypes : Swift.Equatable {}
extension PivoBasicSDK.UUIDTypes : Swift.Hashable {}
extension PivoBasicSDK.BluetoothState : Swift.Equatable {}
extension PivoBasicSDK.BluetoothState : Swift.Hashable {}
extension PivoBasicSDK.BluetoothError : Swift.Equatable {}
extension PivoBasicSDK.BluetoothError : Swift.Hashable {}
extension PivoBasicSDK.RCButton : Swift.Equatable {}
extension PivoBasicSDK.RCButton : Swift.Hashable {}
extension PivoBasicSDK.ButtonState : Swift.Equatable {}
extension PivoBasicSDK.ButtonState : Swift.Hashable {}
extension PivoBasicSDK.ButtonState : Swift.RawRepresentable {}
extension PivoBasicSDK.DeviceStatus : Swift.Equatable {}
extension PivoBasicSDK.DeviceStatus : Swift.Hashable {}
extension PivoBasicSDK.DeviceStatus : Swift.RawRepresentable {}
extension PivoBasicSDK.PivoDeviceType : Swift.Hashable {}
extension PivoBasicSDK.PivoType : Swift.Equatable {}
extension PivoBasicSDK.PivoType : Swift.Hashable {}
extension PivoBasicSDK.PodDeviceType : Swift.Hashable {}
extension PivoBasicSDK.Sound : Swift.Equatable {}
extension PivoBasicSDK.Sound : Swift.Hashable {}
extension PivoBasicSDK.PivoAngle : Swift.Equatable {}
extension PivoBasicSDK.PivoAngle : Swift.Hashable {}
extension PivoBasicSDK.Mode : Swift.Equatable {}
extension PivoBasicSDK.Mode : Swift.Hashable {}
extension PivoBasicSDK.Direction : Swift.Equatable {}
extension PivoBasicSDK.Direction : Swift.Hashable {}
extension PivoBasicSDK.XAxisDirection : Swift.Equatable {}
extension PivoBasicSDK.XAxisDirection : Swift.Hashable {}
extension PivoBasicSDK.PatternType : Swift.Equatable {}
extension PivoBasicSDK.PatternType : Swift.Hashable {}
extension PivoBasicSDK.PatternType : Swift.RawRepresentable {}
extension PivoBasicSDK.PresetInterval : Swift.Equatable {}
extension PivoBasicSDK.PresetInterval : Swift.Hashable {}
extension PivoBasicSDK.PresetInterval : Swift.RawRepresentable {}
extension PivoBasicSDK.PodLedColor : Swift.Equatable {}
extension PivoBasicSDK.PodLedColor : Swift.Hashable {}
extension PivoBasicSDK.LedsPresetPattern : Swift.Equatable {}
extension PivoBasicSDK.LedsPresetPattern : Swift.Hashable {}
extension PivoBasicSDK.LedsPresetPattern : Swift.RawRepresentable {}
extension PivoBasicSDK.MovementCommandType : Swift.Equatable {}
extension PivoBasicSDK.MovementCommandType : Swift.Hashable {}
extension PivoBasicSDK.MovementCommandType : Swift.RawRepresentable {}
extension PivoBasicSDK.LedCommandType : Swift.Equatable {}
extension PivoBasicSDK.LedCommandType : Swift.Hashable {}
extension PivoBasicSDK.LedCommandType : Swift.RawRepresentable {}
extension PivoBasicSDK.CommandGroup : Swift.Equatable {}
extension PivoBasicSDK.CommandGroup : Swift.Hashable {}
extension PivoBasicSDK.CommandGroup : Swift.RawRepresentable {}
extension PivoBasicSDK.BasicCommandType : Swift.Equatable {}
extension PivoBasicSDK.BasicCommandType : Swift.Hashable {}
extension PivoBasicSDK.BasicCommandType : Swift.RawRepresentable {}
extension PivoBasicSDK.BufferType : Swift.Equatable {}
extension PivoBasicSDK.BufferType : Swift.Hashable {}
extension PivoBasicSDK.CameraResolution : Swift.Equatable {}
extension PivoBasicSDK.CameraResolution : Swift.Hashable {}
extension PivoBasicSDK.EngineCamera : Swift.Equatable {}
extension PivoBasicSDK.EngineCamera : Swift.Hashable {}
extension PivoBasicSDK.RCCommandType : Swift.Equatable {}
extension PivoBasicSDK.RCCommandType : Swift.Hashable {}
extension PivoBasicSDK.RCCommandType : Swift.RawRepresentable {}
extension PivoBasicSDK.MicMode : Swift.Equatable {}
extension PivoBasicSDK.MicMode : Swift.Hashable {}
extension PivoBasicSDK.MicMode : Swift.RawRepresentable {}
extension PivoBasicSDK.ByPassState : Swift.Equatable {}
extension PivoBasicSDK.ByPassState : Swift.Hashable {}
extension PivoBasicSDK.ByPassState : Swift.RawRepresentable {}
extension PivoBasicSDK.EarphoneStatus : Swift.Equatable {}
extension PivoBasicSDK.EarphoneStatus : Swift.Hashable {}
extension PivoBasicSDK.EarphoneStatus : Swift.RawRepresentable {}
extension PivoBasicSDK.MicLedColor : Swift.Equatable {}
extension PivoBasicSDK.MicLedColor : Swift.Hashable {}
extension PivoBasicSDK.MicLedColor : Swift.RawRepresentable {}
extension PivoBasicSDK.NoiseCancellationState : Swift.Equatable {}
extension PivoBasicSDK.NoiseCancellationState : Swift.Hashable {}
extension PivoBasicSDK.NoiseCancellationState : Swift.RawRepresentable {}
extension PivoBasicSDK.SoundMode : Swift.Equatable {}
extension PivoBasicSDK.SoundMode : Swift.Hashable {}
extension PivoBasicSDK.SoundMode : Swift.RawRepresentable {}
extension PivoBasicSDK.DeviceModel : Swift.Equatable {}
extension PivoBasicSDK.DeviceModel : Swift.Hashable {}
extension PivoBasicSDK.DeviceModel : Swift.RawRepresentable {}
extension PivoBasicSDK.PivoConnectionStatus : Swift.Equatable {}
extension PivoBasicSDK.PivoConnectionStatus : Swift.Hashable {}
extension PivoBasicSDK.OTAUpdateError : Swift.Equatable {}
extension PivoBasicSDK.OTAUpdateError : Swift.Hashable {}
extension PivoBasicSDK.PivoOTAUpdaterError : Swift.Equatable {}
extension PivoBasicSDK.PivoOTAUpdaterError : Swift.Hashable {}
extension PivoBasicSDK.Pivo2DOTAUpdater.Status : Swift.Equatable {}
extension PivoBasicSDK.Pivo2DOTAUpdater.Status : Swift.Hashable {}
extension PivoBasicSDK.member : Swift.Equatable {}
extension PivoBasicSDK.member : Swift.Hashable {}
extension PivoBasicSDK.PivoLogLevel : Swift.Equatable {}
extension PivoBasicSDK.PivoLogLevel : Swift.Hashable {}
extension PivoBasicSDK.PivoLogLevel : Swift.RawRepresentable {}
extension PivoBasicSDK.PivoRCBluetoothConnection.PivoConnectionStatus : Swift.Equatable {}
extension PivoBasicSDK.PivoRCBluetoothConnection.PivoConnectionStatus : Swift.Hashable {}
