// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PivoBasicSDK
import CoreBluetooth
import Foundation
@_exported import PivoBasicSDK
import Security
import Swift
public protocol PivoConnectionDelegate : AnyObject {
  func pivoConnection(didDiscover id: Swift.String, deviceName: Swift.String)
  func pivoConnection(didConnect id: Swift.String)
  func pivoConnection(didDisconnect id: Swift.String)
  func pivoConnection(didFailToConnect id: Swift.String)
  func pivoConnection(didEstablishSuccessfully id: Swift.String)
  func pivoConnectionDidRotate()
  func pivoConnectionDidRotate1DegreeLeft()
  func pivoConnectionDidRotate1DegreeRight()
  func pivoConnection(batteryLevel: Swift.Int)
  func pivoConnection(remoteControlerCommandReceived command: PivoBasicSDK.PivoEvent)
  func pivoConnection(bluetoothIsOn: Swift.Bool)
  func pivoConnectionBluetoothPermissionDenied()
}
extension PivoConnectionDelegate {
  public func pivoConnection(didDiscover id: Swift.String, deviceName: Swift.String)
  public func pivoConnection(didConnect id: Swift.String)
  public func pivoConnection(didDisconnect id: Swift.String)
  public func pivoConnection(didFailToConnect id: Swift.String)
  public func pivoConnection(didEstablishSuccessfully id: Swift.String)
  public func pivoConnectionDidRotate()
  public func pivoConnection(batteryLevel: Swift.Int)
  public func pivoConnection(remoteControlerCommandReceived command: PivoBasicSDK.PivoEvent)
  public func pivoConnection(bluetoothIsOn: Swift.Bool)
  public func pivoConnectionDidRotate1DegreeLeft()
  public func pivoConnectionDidRotate1DegreeRight()
}
public enum Direction {
  case RIGHT
  case LEFT
  public static func == (a: PivoBasicSDK.Direction, b: PivoBasicSDK.Direction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PivoEvent {
  case MODE
  case CAMERA
  case STOP
  case OFF
  case CONNECTION_COMPLETED
  case NAME_CHANGED
  case VERSION
  case BATTERY_CHANGED(batteryLevel: Swift.Int)
  case LEFT_PRESSED
  case LEFT_RELEASED
  case RIGHT_PRESSED
  case RIGHT_RELEASED
  case LEFT_CONTINOUS_PRESSED
  case RIGHT_CONTINOUS_PRESSED
  case SPEEDUP_PRESSED(secondsPerRound: Swift.Int)
  case SPEEDUP_RELEASED(secondsPerRound: Swift.Int)
  case SPEEDDOWN_PRESSED(secondsPerRound: Swift.Int)
  case SPEEDDOWN_RELEASED(secondsPerRound: Swift.Int)
  case SPEED(secondsPerRound: Swift.Int)
  case ROTATED(direction: PivoBasicSDK.Direction, angle: Swift.Int)
  case ROTATED_1DEGREE_LEFT
  case ROTATED_1DEGREE_RIGHT
}
extension PivoEvent : Swift.Equatable {
  public static func == (lhs: PivoBasicSDK.PivoEvent, rhs: PivoBasicSDK.PivoEvent) -> Swift.Bool
}
public enum PivoError : Foundation.LocalizedError {
  case cannotReadLicenseKeyFile
  case licenseNotProvided
  case invalidLicenseKey
  case expiredLicenseKey
  case bluetoothOff
  case bluetoothPermissionNotAllowed
  case trackingModeNotSupported
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: PivoBasicSDK.PivoError, b: PivoBasicSDK.PivoError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PivoType {
  case red
  case silver
  case black
  public static func == (a: PivoBasicSDK.PivoType, b: PivoBasicSDK.PivoType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PivoBasicSDK {
  public static var shared: PivoBasicSDK.PivoBasicSDK
  public func unlockWithLicenseKey(licenseKeyFileURL url: Foundation.URL) throws
  public func isPivoConnected() -> Swift.Bool
  public func addDelegate(_ delegate: PivoBasicSDK.PivoConnectionDelegate)
  public func removeDelegate(_ delegate: PivoBasicSDK.PivoConnectionDelegate)
  public func scan() throws
  public func stopScan()
  public func connect(id: Swift.String)
  public func disconnect()
  public func setFastestSpeed()
  public func getSupportedSpeedsInSecondsPerRound() -> [Swift.Int]
  public func setSpeedBySecondsPerRound(_ speed: Swift.Int)
  public func getSupportedSpeedsByRemoteControllerInSecoundsPerRound() -> [Swift.Int]
  public func turnRight(angle: Swift.Int)
  public func turnRight(angle: Swift.Int, speed: Swift.Int)
  public func turnLeft(angle: Swift.Int)
  public func turnLeft(angle: Swift.Int, speed: Swift.Int)
  public func turnRightContinuously()
  public func turnRightContinuously(speed: Swift.Int)
  public func turnLeftContinuously()
  public func turnLeftContinuously(speed: Swift.Int)
  public func stop()
  public func requestBatteryLevel()
  public func changePivoName(newName: Swift.String)
  public func keepPivoWakeUp(_ wakeUp: Swift.Bool)
  public func getPivoVersion() -> Swift.String
  public func toogleOnByPassRemoteControllerSignal()
  public func toogleOffBypassRemoteControllerSignal()
  @objc deinit
}
extension PivoBasicSDK.Direction : Swift.Equatable {}
extension PivoBasicSDK.Direction : Swift.Hashable {}
extension PivoBasicSDK.PivoError : Swift.Equatable {}
extension PivoBasicSDK.PivoError : Swift.Hashable {}
extension PivoBasicSDK.PivoType : Swift.Equatable {}
extension PivoBasicSDK.PivoType : Swift.Hashable {}
